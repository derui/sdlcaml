########################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################
# The standard OMakefile.
# You will usually need to modify this file for your project.

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#
open build/C

#
# This project requires ocamlfind (default - false).
#
USE_OCAMLFIND = true
#
OCAMLPACKS[] =
#    glMLite
#    stdlib
#
if $(not $(OCAMLFIND_EXISTS))
   eprintln(This project requires ocamlfind, but is was not found.)
   eprintln(You need to install ocamlfind and run "omake --configure".)
   exit 1

#
# Include path
#
OCAMLINCLUDES += ../lib

#
# Compile native or byte code?
#
# The default values are defined as follows:
#
NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = true

#
# Various options
#
OCAMLFLAGS    += -annot
# OCAMLCFLAGS   +=
# OCAMLOPTFLAGS +=
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=

################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
# OCamlGeneratedFiles(parser.ml lexer.ml)

################################################
# Build bindings for OCaml to C.
#

# check that can sdl-config use.
.STATIC:
	SDL_CONFIG_FOUND = $(ConfMsgFound $(CheckProg sdl-config))
	SDL_CONFIG = $(if $(SDL_CONFIG_FOUND), sdl-config, "")

	if $(not $(SDL_CONFIG_FOUND))
		eprintln(can not build because sdl-config is not found. Please check to valid SDL installed)
		$(exit 1)
	SDL_CONFIGURE = $(shell $(SDL_CONFIG) --libs --cflags)
	SDL_CONFIGURE += -lSDL_mixer -DDEBUG
	export

%$(EXT_OBJ): %.c :scanner: scan-c-%.c
	$(OCamlC) -ccopt "-std=c99 $(SDL_CONFIGURE)" -o $@ -c $<

GLENUM_GENERATED[] =
	gl_enum.ml
	gl_enum.mli
	gl_enum_stubs.c
	gl_enum.h

SDLGL_GENERATED[] =
	gl_auto.ml
	gl_auto.mli
	gl_auto_stubs.c

$(GLENUM_GENERATED): gl_enum.idl
	$(CAMLIDL) -header $<
	.PHONY: clean
	clean:
		rm -f $@
	export

$(SDLGL_GENERATED): gl_auto.idl
	$(CAMLIDL) -no-include $<
	.PHONY: clean
	clean:
		rm -f $@
	export

CFILES = $(removesuffix $(ls *.c))
# They found no place first, so they need to add to dependencies.
# But after they generated, multi-definition link error if they
# still add to dependencies.
CFILES += $(if $(not $(file-exists gl_auto_stubs.c)), gl_auto_stubs)
CFILES += $(if $(not $(file-exists gl_enum_stubs.c)), gl_enum_stubs)
FILES = $(removesuffix $(ls *.ml))
FILES += gl_auto gl_enum

LIBRARY_NAME = sdlcaml
#
STATICLIBS = $(add-wrapper lib, $(EXT_LIB), $(CFILES))

CONFIG_GENERATED = gl_flags.h sdl_initflags.h sdl_mixer_flags.h

#
# OCAML_LIBS += ../lib/extlib -custom
# OCAML_CLIBS +=
# OCAML_OTHER_LIBS += camlidl
# OCAML_LIB_FLAGS += -cclib -lsdlcaml
#
MyOCamlPackage($(LIBRARY_NAME), $(FILES), $(CFILES),-linkall -cclib -lcamlidl, true)

# As gl_enum.h is referenced by already existed .c file,
# need to add generated files by camlidl to adependency for .DEFAULT.
.DEFAULT: $(SDLGL_GENERATED) $(GLENUM_GENERATED) ../lib/extlib.cmxa sdlcaml.cmxa $(RequireFiles $(CONFIG_GENERATED))
