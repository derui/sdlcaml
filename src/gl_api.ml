(**
   Implementing functions that are not able to be auto generated by camlidl and
   from sdl_gl.idl .
   Functions implemented in this module are direct binding and very low level
   API for OpenGL, so you often use not this module but {!Gl_api} module.

   @version 0.1
   @author derui
*)

open Gl_enum

(** Variants that cheap size of data array with data types.
*)
type array_type = [
| `AByte of char array
| `AUByte of char array
| `AShort of int array
| `AUShort of int array
| `AInt of int array
| `AUInt of int64 array
| `AFloat of float array
| `ADouble of float array
]

(** Variants that big size of data array with data types *)
type big_array_type = [
| `BAByte of (char, Bigarray.int8_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
| `BAUByte of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
| `BAShort of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
| `BAUShort of (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
| `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
| `BAUInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
| `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
| `BADouble of (float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array1.t
]

(** execute a list of display lists.
    the list that is treated array specified with {!big_array_type} which combine
    big_array_type the type of array value with array that value of type is it.
    This function can't apply {!`BADouble}.

    Note: Variant of UByte2/3/4 has to have size to multiply first argument with 2/3/4.

    @param size size of array
    @param lists executeing list
*)
external glCallLists : int -> [< `BAByte of (char, Bigarray.int8_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAUByte of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAShort of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAUShort of (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAUInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAUByte2 of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAUByte3 of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
                              | `BAUByte4 of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
                              ]
  -> unit = "gl_api_glCallLists"

(** define an array of vertex data.

    @param size the number of coodinates per vertex. Must be 2,3, or 4.
    @param stride the byte offset between consecutive vertices.
    @param pointer vertex array
*)
external glVertexPointer : int -> int ->
  [< `BAShoft of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BADouble of (float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit
    = "gl_api_glVertexPointer"

(** define an array of normals

    @param stride the byte offset between consecutive vertices.
    @param pointer normal array
*)
external glNormalPointer : int ->
  [< `BAByte of (char, Bigarray.int8_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAShoft of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BADouble of (float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit
    = "gl_api_glNormalPointer"

(** define an array of colors.

    @param size the number of components per color. Must be 3, or 4.
    @param stride the byte offset between consecutive vertices.
    @param pointer vertex array
*)
external glColorPointer : int -> int -> big_array_type -> unit
  = "gl_api_glColorPointer"

(** define an array of color indexes

    @param stride the byte offset between consecutive color indexes.
    @param pointer color index array
*)
external glIndexPointer : int ->
  [< `BAUByte of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAShoft of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BADouble of (float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit
    = "gl_api_glIndexPointer"

(** define an array of texture coordinates

    @param size the number of coordinates per array element.Must be 1,2,3,or 4
    @param stride the byte offset between consecutive texture coordinate sets
    @param pointer texture coordinate array
*)
external glTexCoordPointer : int ->
  [< `BAShoft of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BADouble of (float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit
    = "gl_api_glTexCoordPointer"

(** define an array of edge flags.

    Note: the flags in given array must be either 1 if true or 0 if false.

    @param stride the byte offset between consecutive edge flags.
    @param array of boolean edge flags
*)
external glEdgeFlagPointer : int -> int ->
  [< `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t]
  -> unit
  = "gl_api_glEdgeFlagPointer"

(** Return the data of specified pointer.

    @param pname specifies the array or buffer pointer to be returned.
    @return data of specified array or buffer.
*)
external glGetPointerv : glenum ->
  [< big_array_type
  | `BAUByte2 of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUByte3 of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUByte4 of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  ]
  = "gl_api_glGetPointerv"

(** render primitives from array data.

    @param mode kind of primitives to render
    @param count number of elements to be rendered
    @param indices indices to be rendered
*)
external glDrawElements : glenum -> int ->
  [< `BAUByte of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUShort of (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit = "gl_api_glDrawElements"

(** Return light source parameter values.

    @param light light source
    @param pname light source parameter
    @return requested data
*)
external glGetLightfv : glenum -> glenum -> float array = "gl_api_glGetLightfv"
external glGetLightiv : glenum -> glenum -> int array = "gl_api_glGetLightiv"

(** Return material parameters

    @param face which of the two materials is being queried
    @param pname material parameter
    @return requested data
*)
external glGetMaterialfv : glenum -> glenum -> float array = "gl_api_glGetMaterialfv"
external glGetMaterialiv : glenum -> glenum -> int array = "gl_api_glGetMaterialiv"

(** read a block of pixels from the frame buffer

    @param x the window coordinate of X where is the lower left corder of pixels.
    @param y the window coordinate of Y where is the lower left corder of pixels.
    @param width the dimensions of width of the pixel rectangle
    @param height the dimensions of height of the pixel rectangle
    @param format format of the pixel data
    @param type data type of the pixel data
    @return pixel data
*)
external glReadPixels : int -> int -> int -> int ->
  glenum -> glenum -> array_type = "gl_api_glReadPixels_native"
    "gl_api_glReadPixels_bytecode"

(** write a block of pixels to the frame buffer.

    @param width the dimensions of width of the pixel rectangle to be written.
    @param height the dimensions of height of the pixel rectangle to be written.
    @param format format of the pixel data
    @param type data type for {!data}
    @param data pixel data
*)
external glDrawPixels : int -> int -> glenum -> glenum -> big_array_type = "gl_api_glDrawPixels"

(**
   Return texture coodinate generation parameters.

   Note: this function do not apply glenum mapped GL_TEXTURE_GEN_MODE.
         If you need that value, call {!glGetTexGenv}.

   @param coord texture coordinate
   @param pname type of value to be returned
   @return requested data.
*)
external glGetTexGendv : glenum -> glenum -> float array = "gl_api_glGetTexGendv"
external glGetTexGenfv : glenum -> glenum -> float array = "gl_api_glGetTexGenfv"
external glGetTexGeniv : glenum -> glenum -> int array = "gl_api_glGetTexGeniv"

(**
   Return texture coodinate generation parameters.

   @param coord texture coordinate
   @return texture generation function
*)
external glGetTexGenv : glenum -> glenum = "gl_api_glGetTexGenv"

(**
   Return texture environment parameters.

   @param target texture environment
   @param pname texture enviromnent parameter
   @return requested data
*)
external glGetTexEnvfv : glenum -> glenum -> float array = "gl_api_glGetTexEnvfv"
external glGetTexEnviv : glenum -> glenum -> int array = "gl_api_glGetTexEnviv"

(**
   Return texture parameter values for a specific level of detail

   @param target texture
   @param level level-of-detail. Level n is the nth mipmap reduction image.
   @param pname name of texture parameter
   @return requested data
*)
external glGetTexLevelParameterfv: glenum -> int -> glenum -> float = "gl_api_glGetTexLevelParameterfv"
external glGetTexLevelParameteriv: glenum -> int -> glenum -> int = "gl_api_glGetTexLevelParameteriv"

(**
   Specify a one dimensional texture image.
   Noted that the parameter of {!width} has limitation of size which must be
   2^n + 2(for some interger n) if GL version does not support non-power-of-two.

   @param target target texture.
   @param level Specifies the level-of-detail number
   @param internalFormat Specifies the number of color components
   @param width Specifies the width of the texture image.
   @param border the width of border. Must be 1 or 0.
   @param format Specifies the format of the pixel data
   @param data data type and texture image data
*)
external glTexImage1D: glenum -> int -> int -> int -> int ->
  glenum -> big_array_type -> unit = "gl_api_glTexImage1D_native"
    "gl_api_glTexImage1D_bytecode"

(**
   Specify a two dimensional texture image.
   Noted that the parameter of {!width} has limitation of size which must be
   2^n + 2(for some interger n) if GL version does not support non-power-of-two.

   @param target target texture.
   @param level Specifies the level-of-detail number
   @param internalFormat Specifies the number of color components
   @param width Specifies the width of the texture image.
   @param height Specifies the height of the texture image.
   @param border the width of border. Must be 1 or 0.
   @param format Specifies the format of the pixel data
   @param data data type and texture image data
*)
external glTexImage2D: glenum -> int -> int -> int -> int -> int ->
  glenum -> big_array_type -> unit = "gl_api_glTexImage2D_native"
    "gl_api_glTexImage2D_bytecode"

(**
   Specify a three dimensional texture image.
   Noted that the parameter of {!width} has limitation of size which must be
   2^n + 2(for some interger n) if GL version does not support non-power-of-two.

   @param target target texture.
   @param level Specifies the level-of-detail number
   @param internalFormat Specifies the number of color components
   @param width Specifies the width of the texture image.
   @param height Specifies the height of the texture image.
   @param depth Specifies the depth of the texture image.
   @param border the width of border. Must be 1 or 0.
   @param format Specifies the format of the pixel data
   @param data data type and texture image data
*)
external glTexImage3D: glenum -> int -> int -> int -> int -> int -> int ->
  glenum -> big_array_type -> unit = "gl_api_glTexImage3D_native"
    "gl_api_glTexImage3D_bytecode"

(**
   Return a texture image.

   @param target Specifies which texture is to be obtained
   @param level Specifies the level-of-detail number of the desired image.
   @param format Specifies a pixel format for the returned data.
   @param data texture data stored into given already allocated
   bigarray that size is to need for it
*)
external glGetTexImage: glenum -> int -> glenum ->
  big_array_type -> unit = "gl_api_glGetTexImage"

(**
   specify a one-dimensional texture subimage.

   @param target Specifies the target texture. Must be GL_TEXTURE_1D
   @param level Specifies the leve-of-detail.
   @param xoffset Specifies a texel offset in the xdirection within the texture array
   @param width Specifies the width of the texture subimage
   @param format Specifies the format of the pixel data.
   @param data texture subimage type and texture subimage type.
*)
external glTexSubImage1D: glenum -> int -> int -> int ->
  glenum -> big_array_type -> unit = "gl_api_glTexSubImage1D_native"
    "gl_api_glTexSubImage1D_bytecode"

(**
   specify a two-dimensional texture subimage.

   @param target Specifies the target texture. Must be GL_TEXTURE_1D
   @param level Specifies the leve-of-detail.
   @param xoffset Specifies a texel offset in the xdirection within the texture array
   @param yoffset Specifies a texel offset in the ydirection within the texture array
   @param width Specifies the width of the texture subimage
   @param height Specifies the height of the texture subimage
   @param format Specifies the format of the pixel data.
   @param data texture subimage type and texture subimage type.
*)
external glTexSubImage2D: glenum -> int -> int -> int -> int -> int ->
  glenum -> big_array_type -> unit = "gl_api_glTexSubImage2D_native"
    "gl_api_glTexSubImage2D_bytecode"

(**
   specify a three-dimensional texture subimage.

   @param target Specifies the target texture. Must be GL_TEXTURE_1D
   @param level Specifies the leve-of-detail.
   @param xoffset Specifies a texel offset in the xdirection within the texture array
   @param yoffset Specifies a texel offset in the ydirection within the texture array
   @param zoffset Specifies a texel offset in the zdirection within the texture array
   @param width Specifies the width of the texture subimage
   @param height Specifies the height of the texture subimage
   @param depth Specifies the depth of the texture subimage
   @param format Specifies the format of the pixel data.
   @param data texture subimage type and texture subimage type.
*)
external glTexSubImage3D: glenum -> int -> int -> int -> int -> int -> int -> int ->
  glenum -> big_array_type -> unit = "gl_api_glTexSubImage3D_native"
    "gl_api_glTexSubImage3D_bytecode"

(**
   Return evaluator parameters

   @param target Specifies the symbolic name of a map
   @param query Specifies which parameter to return
   @return requested data
*)
external glGetMapdv: glenum -> glenum -> float array = "gl_api_glGetMapdv"
external glGetMapfv: glenum -> glenum -> float array = "gl_api_glGetMapfv"
external glGetMapiv: glenum -> glenum -> int array = "gl_api_glGetMapiv"

(**
   Render primitives fro array data

   @param mode kind of primitives to render
   @param start minimum array index contained in {!indices}
   @param end maxmum array index contained in {!indices}
   @param count the number of elements to be rendered
   @param indices indices to render and type
*)
external glDrawRangeElements: glenum -> int -> int -> int ->
  [< `BAUByte of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUShort of (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit = "gl_api_glDrawRangeElements"

(**
   Define a color lookup table.

   @param target type of color lookup table.
   @param internalformat internal format of the color table
   @param width The number of entries in the color lookup table specified by data
   @param format the format of the pixel data in data
   @param data one-dimensional array of pixel and type of array
*)
external glColorTable: glenum -> glenum -> int -> glenum ->
  [< `BAByte of (char, Bigarray.int8_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUByte of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAShort of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUShort of (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit = "gl_api_glColorTable"

(**
   Respecify a portion of a color table

   @param target type of color lookup table
   @param start the staring index of the portion of the color table to be replaced.
   @param count the number of table entries to replace
   @param format the format of the pixel data in data
   @param data one-dimensional array of pixel data and type.
*)
external glColorSubTable: glenum -> int -> int -> glenum ->
  [< `BAByte of (char, Bigarray.int8_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUByte of (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAShort of (int, Bigarray.int16_signed_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUShort of (int, Bigarray.int16_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAUInt of (int, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array1.t
  | `BAFloat of (float, Bigarray.float32_elt, Bigarray.c_layout) Bigarray.Array1.t
  ] -> unit = "gl_api_glColorSubTable"

(**
   Retrieve contents of a color lookup table

   @param target type of color lookup table
   @param format format of the pixel data in table
   @param type type of the pixel data
   @param one-dimensional array of pixel data and data type. Given
   bigarray have to need to allocate enough size for size of pixel data.
*)
external glGetColorTable: glenum -> glenum -> glenum -> big_array_type
  -> unit = "gl_api_glGetColorTable"

(**
   Get color lookup table parameters

   @param target target color table
   @param pname color lookup table parameter
   @return requested data
*)
external glGetColorTableParameterfv: glenum -> glenum -> float array = "gl_api_glGetColorTableParameterfv"
external glGetColorTableParameteriv: glenum -> glenum -> int array = "gl_api_glGetColorTableParameteriv"

(**
   Get histogram table

   @param target Must be GL_HISTOGRAM
   @param reset if true, each component counter that is actually returned is reset to zero
   @param format format of values to be returned
   @param data storing histgram data by this function before
   already-allocated bigarray and data type.
*)
external glGetHistogram: glenum -> bool -> glenum ->
  big_array_type -> unit = "gl_api_glGetHistogram"

(**
   Get histogram table parameters

   @param target Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM
   @param pname name of the parameter to be retrieved
   @return requested values
*)
external glGetHistogramParameterfv: glenum -> glenum -> float = "gl_api_glGetHistogramParameterfv"
external glGetHistogramParameteriv: glenum -> glenum -> int = "gl_api_glGetHistogramParameteriv"

(**
   Get minimum and maximum pixel values

   @param target Must be GL_MINMAX
   @param reset all entries in the minmax table that are actually returned are zero if true
   @param format format of the data to be returned value
   @param data Storaging value by this function have to be already allocated.
*)
external glGetMinmax: glenum -> bool -> glenum -> big_array_type -> unit = "gl_api_glGetMinmax"

(**
   Get minmax parameters

   @param target must be GL_MINMAX
   @param pname parameter to be retrieved
   @return retrieved parameter data
*)
external glGetMinmaxParameterfv: glenum -> glenum -> float = "gl_api_glGetMinmaxParameterfv"
external glGetMinmaxParameteriv: glenum -> glenum -> int = "gl_api_glGetMinmaxParameteriv"

(**
   Define a one-dimensional convolution filter

   @param target Must be GL_CONVOLUTION_1D
   @param internalformat internal format of the convolution filter kernel.
   @param width width of th epixel array referenced by data
   @param format format of the pixel
   @param data type of pixel data and one-dimensional array of pixel data
*)
external glConvolutionFilter1D: glenum -> glenum -> int -> glenum ->
  big_array_type -> unit = "gl_api_glConvolutionFilter1D"

(**
   Define a two-dimensional convolution filter

   @param target Must be GL_CONVOLUTION_1D
   @param internalformat internal format of the convolution filter kernel.
   @param width width of th epixel array referenced by data
   @param height width of th epixel array referenced by data
   @param format format of the pixel
   @param data type of pixel data and one-dimensional array of pixel data
*)
external glConvolutionFilter2D: glenum -> glenum -> int -> int -> glenum ->
  big_array_type -> unit = "gl_api_glConvolutionFilter2D_native"
    "gl_api_glConvolutionFilter2D_bytecode"

(**
   Get current 1D or 2D convolution filter kernel

   @param target Must be GL_CONVOLUTION_1D or GL_CONVOLUTION_2D
   @param format format of the pixel
   @param data pointer to storage for the output image that is
   already-allocated bigarray.
*)
external glGetConvolutionFilter: glenum -> glenum ->
  big_array_type -> unit = "gl_api_glGetConvolutionFilter"

(**
   Get current convolution parameters

   @param target filter whose parameters are to be retrieved
   @param pname the parameter to be retrieved
   @return pointer to storage for the parameters to be retrieved
*)
external glGetConvolutionParameterfv: glenum -> glenum -> float array = "gl_api_glGetConvolutionParameterfv"
external glGetConvolutionParameteriv: glenum -> glenum -> int array = "gl_api_glGetConvolutionParameteriv"

(**
   Specify a one-dimensional texture image in a compressed format

   @param target Specifies the target texture
   @param level level-of-detail
   @param internal format format of the compressed image data
   @param width width of the texture image
   @param border width of the border. Must be either 1 or 0.
   @param imageSize number of unsigned bytes of image data
   @param data compressed image data
*)
external glCompressedTexImage1D: glenum -> int -> glenum -> int ->
  int -> int -> big_array_type -> unit =
    "gl_api_glCompressedTexImage1D_native"
      "gl_api_glCompressedTexImage1D_bytecode"

(**
   Specify a two-dimensional texture image in a compressed format

   @param target Specifies the target texture
   @param level level-of-detail
   @param internal format format of the compressed image data
   @param width width of the texture image
   @param height height of the texture image
   @param border width of the border. Must be either 1 or 0.
   @param imageSize number of unsigned bytes of image data
   @param data compressed image data
*)
external glCompressedTexImage2D: glenum -> int -> glenum -> int ->
  int -> int -> int -> big_array_type -> unit =
    "gl_api_glCompressedTexImage2D_native"
      "gl_api_glCompressedTexImage2D_bytecode"

(**
   Specify a one-dimensional texture image in a compressed format

   @param target Specifies the target texture
   @param level level-of-detail
   @param internal format format of the compressed image data
   @param width width of the texture image
   @param height height of the texture image
   @param depth depth of the texture image
   @param border width of the border. Must be either 1 or 0.
   @param imageSize number of unsigned bytes of image data
   @param data compressed image data
*)
external glCompressedTexImage3D: glenum -> int -> glenum -> int ->
  int -> int -> int -> int -> big_array_type -> unit =
    "gl_api_glCompressedTexImage3D_native"
      "gl_api_glCompressedTexImage3D_bytecode"

(**
   Specify a one-dimensional texture subimage in a compressed format

   @param target Specifies the target texture
   @param level level-of-detail
   @param xoffset a texel offset in the x direction with in th etexture array
   @param width width of the texture image
   @param format format of the compressed image data
   @param imageSize number of unsigned bytes of image data
   @param data compressed image data
*)
external glCompressedTexSubImage1D: glenum -> int -> int -> int ->
  glenum -> int -> big_array_type -> unit =
    "gl_api_glCompressedTexSubImage1D_native"
      "gl_api_glCompressedTexSubImage1D_bytecode"

(**
   Specify a two-dimensional texture subimage in a compressed format

   @param target Specifies the target texture
   @param level level-of-detail
   @param xoffset a texel offset in the x direction with in th etexture array
   @param yoffset a texel offset in the y direction with in th etexture array=
   @param width width of the texture image
   @param height height of the texture image
   @param format format of the compressed image data
   @param imageSize number of unsigned bytes of image data
   @param data compressed image data
*)
external glCompressedTexSubImage2D: glenum -> int -> int -> int -> int ->
  int -> glenum -> int -> big_array_type -> unit =
    "gl_api_glCompressedTexSubImage2D_native"
      "gl_api_glCompressedTexSubImage2D_bytecode"

(**
   Specify a three-dimensional texture subimage in a compressed format

   @param target Specifies the target texture
   @param level level-of-detail
   @param xoffset a texel offset in the x direction with in th etexture array
   @param yoffset a texel offset in the y direction with in th etexture array=
   @param zoffset a texel offset in the z direction with in th etexture array=
   @param width width of the texture image
   @param height height of the texture image
   @param depth depth of the texture image
   @param format format of the compressed image data
   @param imageSize number of unsigned bytes of image data
   @param data compressed image data
*)
external glCompressedTexSubImage3D: glenum -> int -> int -> int -> int -> int ->
  int -> int -> glenum -> int -> big_array_type -> unit =
  "gl_api_glCompressedTexSubImage3D_native"
    "gl_api_glCompressedTexSubImage3D_bytecode"

(**
   return a compressed texture image

   @param target specifies which texture is to be obtained
   @param lod level-of-detail
   @param data Retrieving compressed texture image is alreadly
   allocated bigarray.
*)
external glGetCompressedTexImage: glenum -> int -> big_array_type ->
  unit = "gl_api_glGetCompressedTexImage"
