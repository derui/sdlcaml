########################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################
# The standard OMakefile.
# You will usually need to modify this file for your project.

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#
open build/C

#
# This project requires ocamlfind (default - false).
#
USE_OCAMLFIND = true
#
OCAMLPACKS[] =
	str
#    stdlib
#
if $(not $(OCAMLFIND_EXISTS))
   eprintln(This project requires ocamlfind, but is was not found.)
   eprintln(You need to install ocamlfind and run "omake --configure".)
   exit 1

#
# Include path
#
# OCAMLINCLUDES += ../lib

#
# Compile native or byte code?
#
# The default values are defined as follows:
#
NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = $(not $(OCAMLOPT_EXISTS))

#
# Various options
#
OCAMLFLAGS    += -annot-bin
# OCAMLCFLAGS   +=
OCAMLOPTFLAGS += -linkpkg
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=

################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
# OCamlGeneratedFiles(parser.ml lexer.ml)

################################################
# Build bindings for OCaml to C.
#

INCLUDES += /usr/include/caml

GenerateTypeFlags(output, suffix) =
	protected.OUTPUT_NAME = $(removesuffix $(output))
	protected.FLAG_GENERATE_PROG_NAME[] =
		$(addsuffix .ml, $(removesuffix $(output)))
		$(addsuffix _binding.ml, $(removesuffix $(output)))

	protected.FLAG_GENERATE_PROG = $(addsuffix $(suffix)$(EXE), $(removesuffix $(output)))

	$(output): $(FLAG_GENERATE_PROG) $(output).in
		section
			initflags = $(shella $<)
			stdout = $(fopen $(output), w)
			fsubst($(string $(nth 1, $+)))
			case $"^#FLAGS"
				foreach(x, $(initflags))
					println($x)
				value
			cp $@ ../$@

	../$(output): $(output)
		section
			cp $(output) $@

	$(FLAG_GENERATE_PROG): $(FLAG_GENERATE_PROG_NAME)
		section
			TARGET = $@
			$(OCAMLOPT) -o $(TARGET) $+
	export

	return $(array $(FLAG_GENERATE_PROG), $(output), ../$(output))
#
# OCAML_LIBS += ../lib/mylib
# OCAML_CLIBS +=
# OCAML_OTHER_LIBS += nums Glut GL bigarray vertArray VBO
# OCAML_LIB_FLAGS +=
# OCAML_PACKAGE_NAME =
#
GENERATE[] =
	$(GenerateTypeFlags sdl_window_event_id.h, $(EMPTY))
	$(GenerateTypeFlags sdl_window_event_id.c, _binding)
	$(GenerateTypeFlags sdl_gl_context_flags.h, $(EMPTY))
	$(GenerateTypeFlags sdl_gl_context_flags.c, _binding)
	$(GenerateTypeFlags sdl_gl_profile.h, $(EMPTY))
	$(GenerateTypeFlags sdl_gl_profile.c, _binding)
	$(GenerateTypeFlags sdl_gl_attr.h, $(EMPTY))
	$(GenerateTypeFlags sdl_gl_attr.c, _binding)
	$(GenerateTypeFlags sdl_blendmode.h, $(EMPTY))
	$(GenerateTypeFlags sdl_blendmode.c, _binding)
	$(GenerateTypeFlags sdl_window_flags.h, $(EMPTY))
	$(GenerateTypeFlags sdl_window_flags.c, _binding)
	$(GenerateTypeFlags sdl_pixel_format_enum.h, $(EMPTY))
	$(GenerateTypeFlags sdl_pixel_format_enum.c, _binding)

all: $(GENERATE)
.DEFAULT: all

generator: $(OCamlProgram gl_enum_generator, gl_enum_generator) $(OCamlProgram gl_api_generator, gl_api_generator)

clean:
	rm -f *.o
	rm -f *.so
	rm -f *.a
	rm -f *.cmi
	rm -f *.cmx
	rm -f *.h
	rm -f $(GENERATE)
	rm -f gl_enum_generator$(EXE)
