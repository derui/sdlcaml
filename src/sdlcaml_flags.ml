module Sdl_event_type = struct
type t =
    SDL_RENDER_TARGETS_RESET
  | SDL_DROPFILE
  | SDL_CLIPBOARDUPDATE
  | SDL_MULTIGESTURE
  | SDL_DOLLARRECORD
  | SDL_DOLLARGESTURE
  | SDL_FINGERMOTION
  | SDL_FINGERUP
  | SDL_FINGERDOWN
  | SDL_CONTROLLERDEVICEREMAPPED
  | SDL_CONTROLLERDEVICEREMOVED
  | SDL_CONTROLLERDEVICEADDED
  | SDL_CONTROLLERBUTTONUP
  | SDL_CONTROLLERBUTTONDOWN
  | SDL_CONTROLLERAXISMOTION
  | SDL_JOYDEVICEREMOVED
  | SDL_JOYDEVICEADDED
  | SDL_JOYBUTTONUP
  | SDL_JOYBUTTONDOWN
  | SDL_JOYHATMOTION
  | SDL_JOYBALLMOTION
  | SDL_JOYAXISMOTION
  | SDL_MOUSEWHEEL
  | SDL_MOUSEBUTTONUP
  | SDL_MOUSEBUTTONDOWN
  | SDL_MOUSEMOTION
  | SDL_TEXTINPUT
  | SDL_TEXTEDITING
  | SDL_KEYUP
  | SDL_KEYDOWN
  | SDL_SYSWMEVENT
  | SDL_WINDOWEVENT
  | SDL_APP_DIDENTERFOREGROUND
  | SDL_APP_WILLENTERFOREGROUND
  | SDL_APP_DIDENTERBACKGROUND
  | SDL_APP_WILLENTERBACKGROUND
  | SDL_APP_LOWMEMORY
  | SDL_APP_TERMINATING
  | SDL_QUIT
  | SDL_AUDIODEVICEADDED
  | SDL_AUDIODEVICEREMOVED
  | SDL_LASTEVENT
  | SDL_USEREVENT of int32

let to_int32 = function
  | SDL_QUIT -> 0x100l
  | SDL_APP_TERMINATING -> 0x101l
  | SDL_APP_LOWMEMORY -> 0x102l
  | SDL_APP_WILLENTERBACKGROUND -> 0x103l
  | SDL_APP_DIDENTERBACKGROUND -> 0x104l
  | SDL_APP_WILLENTERFOREGROUND -> 0x105l
  | SDL_APP_DIDENTERFOREGROUND -> 0x106l
  | SDL_WINDOWEVENT -> 0x200l
  | SDL_SYSWMEVENT -> 0x201l

  | SDL_KEYDOWN -> 0x300l
  | SDL_KEYUP -> 0x301l
  | SDL_TEXTEDITING -> 0x302l
  | SDL_TEXTINPUT -> 0x303l

  | SDL_MOUSEMOTION -> 0x400l
  | SDL_MOUSEBUTTONDOWN -> 0x401l
  | SDL_MOUSEBUTTONUP -> 0x402l
  | SDL_MOUSEWHEEL -> 0x403l

  | SDL_JOYAXISMOTION -> 0x600l
  | SDL_JOYBALLMOTION -> 0x601l
  | SDL_JOYHATMOTION -> 0x602l
  | SDL_JOYBUTTONDOWN -> 0x603l
  | SDL_JOYBUTTONUP -> 0x604l
  | SDL_JOYDEVICEADDED -> 0x605l
  | SDL_JOYDEVICEREMOVED -> 0x606l

  | SDL_CONTROLLERAXISMOTION -> 0x650l
  | SDL_CONTROLLERBUTTONDOWN -> 0x651l
  | SDL_CONTROLLERBUTTONUP -> 0x652l
  | SDL_CONTROLLERDEVICEADDED -> 0x653l
  | SDL_CONTROLLERDEVICEREMOVED -> 0x654l
  | SDL_CONTROLLERDEVICEREMAPPED -> 0x655l

  | SDL_FINGERDOWN -> 0x700l
  | SDL_FINGERUP -> 0x701l
  | SDL_FINGERMOTION -> 0x702l

  | SDL_DOLLARGESTURE -> 0x800l
  | SDL_DOLLARRECORD -> 0x801l
  | SDL_MULTIGESTURE -> 0x802l

  | SDL_CLIPBOARDUPDATE -> 0x900l
  | SDL_DROPFILE -> 0x1000l
  | SDL_RENDER_TARGETS_RESET -> 0x2000l

  | SDL_AUDIODEVICEADDED -> 0x1100l
  | SDL_AUDIODEVICEREMOVED -> 0x1101l
  | SDL_USEREVENT e -> Int32.add 0x8000l e
  | SDL_LASTEVENT -> 0xFFFFl

let of_int32 = function
  | 0x100l -> SDL_QUIT
  | 0x101l -> SDL_APP_TERMINATING
  | 0x102l -> SDL_APP_LOWMEMORY
  | 0x103l -> SDL_APP_WILLENTERBACKGROUND
  | 0x104l -> SDL_APP_DIDENTERBACKGROUND
  | 0x105l -> SDL_APP_WILLENTERFOREGROUND
  | 0x106l -> SDL_APP_DIDENTERFOREGROUND
  | 0x200l -> SDL_WINDOWEVENT
  | 0x201l -> SDL_SYSWMEVENT

  | 0x300l -> SDL_KEYDOWN
  | 0x301l -> SDL_KEYUP
  | 0x302l -> SDL_TEXTEDITING
  | 0x303l -> SDL_TEXTINPUT

  | 0x400l -> SDL_MOUSEMOTION
  | 0x401l -> SDL_MOUSEBUTTONDOWN
  | 0x402l -> SDL_MOUSEBUTTONUP
  | 0x403l -> SDL_MOUSEWHEEL

  | 0x600l -> SDL_JOYAXISMOTION
  | 0x601l -> SDL_JOYBALLMOTION
  | 0x602l -> SDL_JOYHATMOTION
  | 0x603l -> SDL_JOYBUTTONDOWN
  | 0x604l -> SDL_JOYBUTTONUP
  | 0x605l -> SDL_JOYDEVICEADDED
  | 0x606l -> SDL_JOYDEVICEREMOVED

  | 0x650l -> SDL_CONTROLLERAXISMOTION
  | 0x651l -> SDL_CONTROLLERBUTTONDOWN
  | 0x652l -> SDL_CONTROLLERBUTTONUP
  | 0x653l -> SDL_CONTROLLERDEVICEADDED
  | 0x654l -> SDL_CONTROLLERDEVICEREMOVED
  | 0x655l -> SDL_CONTROLLERDEVICEREMAPPED

  | 0x700l -> SDL_FINGERDOWN
  | 0x701l -> SDL_FINGERUP
  | 0x702l -> SDL_FINGERMOTION

  | 0x800l -> SDL_DOLLARGESTURE
  | 0x801l -> SDL_DOLLARRECORD
  | 0x802l -> SDL_MULTIGESTURE

  | 0x900l -> SDL_CLIPBOARDUPDATE
  | 0x1000l -> SDL_DROPFILE
  | 0x2000l -> SDL_RENDER_TARGETS_RESET
  | 0x1100l -> SDL_AUDIODEVICEADDED
  | 0x1101l -> SDL_AUDIODEVICEREMOVED
  | e when 0x8000l <= e && e < 0xffffl -> SDL_USEREVENT Int32.(sub e 0x8000l)
  | 0xffffl -> SDL_LASTEVENT
  | _ -> failwith "Unknown SDL_EventType"
end
module Sdl_audio_allow_status = struct
type t =
  [ `FREQUENCY_CHANGE
  | `FORMAT_CHANGE
  | `CHANNELS_CHANGE
  ]

let mapping = [
  (1, `FREQUENCY_CHANGE);
  (2, `FORMAT_CHANGE);
  (4, `CHANNELS_CHANGE);
]

let of_int = function
  | `FREQUENCY_CHANGE -> 1
  | `FORMAT_CHANGE -> 2
  | `CHANNELS_CHANGE -> 4

let to_list v =
  List.fold_left (fun memo (mask, variant) ->
    if v land mask > 0 then variant :: memo else memo
  ) [] mapping

let of_list list =
  List.fold_left (fun memo v ->
    memo lor (of_int v)
  ) 0 list
end
module Sdl_audio_device = struct
type t = [`ADDED | `REMOVED]

let of_int32 t =
  let added = Sdl_event_type.SDL_AUDIODEVICEADDED |> Sdl_event_type.to_int32
  and removed = Sdl_event_type.SDL_AUDIODEVICEREMOVED |> Sdl_event_type.to_int32 in
  match t with
  | s when s = added -> `ADDED
  | s when s = removed -> `REMOVED
  | _ -> failwith "No variant match given value"

let to_int32 = function
  | `REMOVED -> Sdl_event_type.SDL_AUDIODEVICEREMOVED |> Sdl_event_type.to_int32
  | `ADDED -> Sdl_event_type.SDL_AUDIODEVICEADDED |> Sdl_event_type.to_int32
end
module Sdl_audio_format = struct
type t =
    (* 8-bit *)
    AUDIO_S8
  | AUDIO_U8
  (* 16-bit *)
  | AUDIO_S16LSB
  | AUDIO_S16MSB
  | AUDIO_U16LSB
  | AUDIO_U16MSB
  (* 32-bit *)
  | AUDIO_S32LSB
  | AUDIO_S32MSB
  (* float *)
  | AUDIO_F32LSB
  | AUDIO_F32MSB

let to_int = function 
  | AUDIO_U8 -> 0x0008
  | AUDIO_S8 -> 0x8008
  | AUDIO_U16LSB -> 0x0010
  | AUDIO_S16LSB -> 0x8010
  | AUDIO_U16MSB -> 0x1010
  | AUDIO_S16MSB -> 0x9010
  | AUDIO_S32LSB -> 0x8020
  | AUDIO_S32MSB -> 0x9020
  | AUDIO_F32LSB -> 0x8120
  | AUDIO_F32MSB -> 0x9120

let of_int = function
  | 0x0008 -> AUDIO_U8
  | 0x8008 -> AUDIO_S8
  | 0x0010 -> AUDIO_U16LSB
  | 0x8010 -> AUDIO_S16LSB
  | 0x1010 -> AUDIO_U16MSB
  | 0x9010 -> AUDIO_S16MSB
  | 0x8020 -> AUDIO_S32LSB
  | 0x9020 -> AUDIO_S32MSB
  | 0x8120 -> AUDIO_F32LSB
  | 0x9120 -> AUDIO_F32MSB
  | _ -> failwith "No have audio_format matching given value"
end
module Sdl_audio_status = struct
type t =
    SDL_AUDIO_STOPPED
  | SDL_AUDIO_PLAYING
  | SDL_AUDIO_PAUSED

let to_int = function
  | SDL_AUDIO_STOPPED -> 0
  | SDL_AUDIO_PLAYING -> 1
  | SDL_AUDIO_PAUSED -> 2

let of_int = function
  | 0 -> SDL_AUDIO_STOPPED
  | 1 -> SDL_AUDIO_PLAYING
  | 2 -> SDL_AUDIO_PAUSED
  | _ -> failwith "No audio_status match with given value"
end
module Sdl_availability = struct
type t = [`DISABLE
         |`ENABLE
         ]

let to_int = function
  | `DISBLE -> 0
  | `ENABLE -> 1

let of_int = function
  | 0 -> `DISBLE
  | 1 -> `ENABLE
  | _ -> failwith "No availability match with given value"
end
module Sdl_blendmode = struct
type t =
    SDL_BLENDMODE_MOD
  | SDL_BLENDMODE_ADD
  | SDL_BLENDMODE_BLEND
  | SDL_BLENDMODE_NONE

let to_int = function
  | SDL_BLENDMODE_MOD -> 0x4
  | SDL_BLENDMODE_ADD -> 0x2
  | SDL_BLENDMODE_BLEND -> 0x1
  | SDL_BLENDMODE_NONE -> 0x0

let of_int = function
  | 0x4 -> SDL_BLENDMODE_MOD
  | 0x2 -> SDL_BLENDMODE_ADD
  | 0x1 -> SDL_BLENDMODE_BLEND
  | 0x0 -> SDL_BLENDMODE_NONE
  | _ -> failwith "No blendmode match with given value"
end
module Sdl_button_state = struct

type t = SDL_PRESSED | SDL_RELEASED

let to_int = function
  | SDL_PRESSED -> 1
  | SDL_RELEASED -> 0

let of_int = function
  | 1 -> SDL_PRESSED
  | 0 -> SDL_RELEASED
  | _ -> failwith "Unknown value on Sdl_button_state.t"
end
module Sdl_controller_axis = struct
type t = [`TRIGGERRIGHT
         |`TRIGGERLEFT
         |`RIGHTY
         |`RIGHTX
         |`LEFTY
         |`LEFTX
         |`INVALID
         ]

let to_int = function
  | `INVALID -> -1
  | `LEFTX -> 0
  | `LEFTY -> 1
  | `RIGHTX -> 2
  | `RIGHTY -> 3
  | `TRIGGERLEFT -> 4
  | `TRIGGERRIGHT -> 5

let of_int = function
  | -1 -> `INVALID
  | 0 -> `LEFTX
  | 1 -> `LEFTY
  | 2 -> `RIGHTX
  | 3 -> `RIGHTY
  | 4 -> `TRIGGERLEFT
  | 5 -> `TRIGGERRIGHT
  | _ -> failwith "No variant match given value"
end
module Sdl_controller_bind_type = struct
type t =
    SDL_CONTROLLER_BINDTYPE_NONE
  | SDL_CONTROLLER_BINDTYPE_BUTTON
  | SDL_CONTROLLER_BINDTYPE_AXIS
  | SDL_CONTROLLER_BINDTYPE_HAT

let to_int = function
  | SDL_CONTROLLER_BINDTYPE_NONE -> 0
  | SDL_CONTROLLER_BINDTYPE_BUTTON -> 1
  | SDL_CONTROLLER_BINDTYPE_AXIS -> 2
  | SDL_CONTROLLER_BINDTYPE_HAT -> 3

let of_int = function
  | 0 -> SDL_CONTROLLER_BINDTYPE_NONE
  | 1 -> SDL_CONTROLLER_BINDTYPE_BUTTON
  | 2 -> SDL_CONTROLLER_BINDTYPE_AXIS
  | 3 -> SDL_CONTROLLER_BINDTYPE_HAT
  | _ -> failwith "Unknown value for mapping"

end
module Sdl_controller_device = struct
type t = [`REMAPPED
         | `REMOVED
         | `ADDED
         ]

let to_int = function
  | `REMAPPED -> 0x655
  | `REMOVED -> 0x654
  | `ADDED -> 0x653

let of_int = function
  | 0x655 -> `REMAPPED
  | 0x654 -> `REMOVED
  | 0x653 -> `ADDED
  | _ -> failwith "No variant match given value"
end
module Sdl_dollar = struct
(* Provide SDL_DOLLAR* mapping of variant to use in OCaml useful. *)
type t = [`RECORD | `GESTURE]

let to_int32 = function
  | `RECORD -> Sdl_event_type.SDL_DOLLARRECORD |> Sdl_event_type.to_int32
  | `GESTURE -> Sdl_event_type.SDL_DOLLARGESTURE |> Sdl_event_type.to_int32

let of_int32 t =
  let record = Sdl_event_type.SDL_DOLLARRECORD |> Sdl_event_type.to_int32
  and gesture = Sdl_event_type.SDL_DOLLARGESTURE |> Sdl_event_type.to_int32 in
  
  match t with
  | s when s = record -> `RECORD
  | s when s = gesture -> `GESTURE
  | _ -> failwith "No variant match given value"
end
module Sdl_finger = struct
type t = [`MOTION | `DOWN | `UP]

let of_int32 t =
  let motion = Sdl_event_type.SDL_FINGERMOTION |> Sdl_event_type.to_int32
  and down = Sdl_event_type.SDL_FINGERDOWN |> Sdl_event_type.to_int32
  and up = Sdl_event_type.SDL_FINGERUP |> Sdl_event_type.to_int32 in
  match t with
  | s when s = motion -> `MOTION
  | s when s = down -> `DOWN
  | s when s = up -> `UP
  | _ -> failwith "No variant match given value"

let to_int32 = function
  | `MOTION -> Sdl_event_type.SDL_FINGERMOTION |> Sdl_event_type.to_int32
  | `DOWN -> Sdl_event_type.SDL_FINGERDOWN |> Sdl_event_type.to_int32
  | `UP -> Sdl_event_type.SDL_FINGERUP |> Sdl_event_type.to_int32
end
module Sdl_game_controller_button = struct
type t = [`DPAD_RIGHT
         |`DPAD_LEFT
         |`DPAD_DOWN
         |`DPAD_UP
         |`RIGHTSHOULDER
         |`LEFTSHOULDER
         |`RIGHTSTICK
         |`LEFTSTICK
         |`START
         |`GUIDE
         |`BACK
         |`Y
         |`X
         |`B
         |`A
         ]

let to_int = function
  | `A -> 0
  | `B -> 1
  | `X -> 2
  | `Y -> 3
  | `BACK -> 4
  | `GUIDE -> 5
  | `START -> 6
  | `LEFTSTICK -> 7
  | `RIGHTSTICK -> 8
  | `LEFTSHOULDER -> 9
  | `RIGHTSHOULDER -> 10
  | `DPAD_UP -> 11
  | `DPAD_DOWN -> 12
  | `DPAD_LEFT -> 13
  | `DPAD_RIGHT -> 14

let of_int = function
  | 0 -> `A
  | 1 -> `B
  | 2 -> `X
  | 3 -> `Y
  | 4 -> `BACK
  | 5 -> `GUIDE
  | 6 -> `START
  | 7 -> `LEFTSTICK
  | 8 -> `RIGHTSTICK
  | 9 -> `LEFTSHOULDER
  | 10 -> `RIGHTSHOULDER
  | 11 -> `DPAD_UP
  | 12 -> `DPAD_DOWN
  | 13 -> `DPAD_LEFT
  | 14 -> `DPAD_RIGHT
  | _ -> failwith "No variant to match given value"
end
module Sdl_gl_attr = struct
type t =
    SDL_GL_RED_SIZE
  | SDL_GL_GREEN_SIZE
  | SDL_GL_BLUE_SIZE
  | SDL_GL_ALPHA_SIZE
  | SDL_GL_BUFFER_SIZE
  | SDL_GL_DOUBLEBUFFER
  | SDL_GL_DEPTH_SIZE
  | SDL_GL_STENCIL_SIZE
  | SDL_GL_ACCUM_RED_SIZE
  | SDL_GL_ACCUM_GREEN_SIZE
  | SDL_GL_ACCUM_BLUE_SIZE
  | SDL_GL_ACCUM_ALPHA_SIZE
  | SDL_GL_STEREO
  | SDL_GL_MULTISAMPLEBUFFERS
  | SDL_GL_MULTISAMPLESAMPLES
  | SDL_GL_ACCELERATED_VISUAL
  | SDL_GL_RETAINED_BACKING
  | SDL_GL_CONTEXT_MAJOR_VERSION
  | SDL_GL_CONTEXT_MINOR_VERSION
  | SDL_GL_CONTEXT_EGL
  | SDL_GL_CONTEXT_FLAGS
  | SDL_GL_CONTEXT_PROFILE_MASK
  | SDL_GL_SHARE_WITH_CURRENT_CONTEXT
  | SDL_GL_FRAMEBUFFER_SRGB_CAPABLE

let to_int = function
  | SDL_GL_RED_SIZE                    -> 0
  | SDL_GL_GREEN_SIZE                  -> 1
  | SDL_GL_BLUE_SIZE                   -> 2
  | SDL_GL_ALPHA_SIZE                  -> 3
  | SDL_GL_BUFFER_SIZE                 -> 4
  | SDL_GL_DOUBLEBUFFER                -> 5
  | SDL_GL_DEPTH_SIZE                  -> 6
  | SDL_GL_STENCIL_SIZE                -> 7
  | SDL_GL_ACCUM_RED_SIZE              -> 8
  | SDL_GL_ACCUM_GREEN_SIZE            -> 9
  | SDL_GL_ACCUM_BLUE_SIZE             -> 10
  | SDL_GL_ACCUM_ALPHA_SIZE            -> 11
  | SDL_GL_STEREO                      -> 12
  | SDL_GL_MULTISAMPLEBUFFERS          -> 13
  | SDL_GL_MULTISAMPLESAMPLES          -> 14
  | SDL_GL_ACCELERATED_VISUAL          -> 15
  | SDL_GL_RETAINED_BACKING            -> 16
  | SDL_GL_CONTEXT_MAJOR_VERSION       -> 17
  | SDL_GL_CONTEXT_MINOR_VERSION       -> 18
  | SDL_GL_CONTEXT_EGL                 -> 19
  | SDL_GL_CONTEXT_FLAGS               -> 20
  | SDL_GL_CONTEXT_PROFILE_MASK        -> 21
  | SDL_GL_SHARE_WITH_CURRENT_CONTEXT  -> 22
  | SDL_GL_FRAMEBUFFER_SRGB_CAPABLE    -> 23

let of_int = function
  | 0   -> SDL_GL_RED_SIZE
  | 1   -> SDL_GL_GREEN_SIZE
  | 2   -> SDL_GL_BLUE_SIZE
  | 3   -> SDL_GL_ALPHA_SIZE
  | 4   -> SDL_GL_BUFFER_SIZE
  | 5   -> SDL_GL_DOUBLEBUFFER
  | 6   -> SDL_GL_DEPTH_SIZE
  | 7   -> SDL_GL_STENCIL_SIZE
  | 8   -> SDL_GL_ACCUM_RED_SIZE
  | 9   -> SDL_GL_ACCUM_GREEN_SIZE
  | 10  -> SDL_GL_ACCUM_BLUE_SIZE
  | 11  -> SDL_GL_ACCUM_ALPHA_SIZE
  | 12  -> SDL_GL_STEREO
  | 13  -> SDL_GL_MULTISAMPLEBUFFERS
  | 14  -> SDL_GL_MULTISAMPLESAMPLES
  | 15  -> SDL_GL_ACCELERATED_VISUAL
  | 16  -> SDL_GL_RETAINED_BACKING
  | 17  -> SDL_GL_CONTEXT_MAJOR_VERSION
  | 18  -> SDL_GL_CONTEXT_MINOR_VERSION
  | 19  -> SDL_GL_CONTEXT_EGL
  | 20  -> SDL_GL_CONTEXT_FLAGS
  | 21  -> SDL_GL_CONTEXT_PROFILE_MASK
  | 22  -> SDL_GL_SHARE_WITH_CURRENT_CONTEXT
  | 23  -> SDL_GL_FRAMEBUFFER_SRGB_CAPABLE
  | _ -> failwith "No variant to match given value"
end
module Sdl_gl_context_flags = struct
type t =
    SDL_GL_CONTEXT_RESET_ISOLATION_FLAG
  | SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG
  | SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG
  | SDL_GL_CONTEXT_DEBUG_FLAG

let to_int = function
  | SDL_GL_CONTEXT_RESET_ISOLATION_FLAG -> 0x8
  | SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG -> 0x4
  | SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG -> 0x2
  | SDL_GL_CONTEXT_DEBUG_FLAG -> 0x1

let of_int = function
  | 0x8 -> SDL_GL_CONTEXT_RESET_ISOLATION_FLAG
  | 0x4 -> SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG
  | 0x2 -> SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG
  | 0x1 -> SDL_GL_CONTEXT_DEBUG_FLAG
  | _ -> failwith "No variant to match given value"
end
module Sdl_gl_profile = struct
type t =
  [ `ES
  | `COMPATIBILITY
  | `CORE
  ]

let to_int = function
  | `ES -> 0x4
  | `COMPATIBILITY -> 0x2
  | `CORE -> 0x1

let of_int = function
  | 0x4 -> `ES
  | 0x2 -> `COMPATIBILITY
  | 0x1 -> `CORE
  | _ -> failwith "No variant to match given value"
end
module Sdl_hat = struct
type t =
    SDL_HAT_RIGHTDOWN
  | SDL_HAT_DOWN
  | SDL_HAT_LEFTDOWN
  | SDL_HAT_RIGHT
  | SDL_HAT_CENTERED
  | SDL_HAT_LEFT
  | SDL_HAT_RIGHTUP
  | SDL_HAT_UP
  | SDL_HAT_LEFTUP


let to_int = function
  | SDL_HAT_CENTERED -> 0x01
  | SDL_HAT_UP -> 0x01
  | SDL_HAT_RIGHT -> 0x02
  | SDL_HAT_DOWN -> 0x04
  | SDL_HAT_LEFT -> 0x08
  | SDL_HAT_RIGHTUP -> 0x02 lor 0x01
  | SDL_HAT_RIGHTDOWN -> 0x02 lor 0x04
  | SDL_HAT_LEFTUP -> 0x08 lor 0x01
  | SDL_HAT_LEFTDOWN -> 0x08 lor 0x04

let of_int = function
  | 0x00 -> SDL_HAT_CENTERED
  | 0x01 -> SDL_HAT_UP
  | 0x02 -> SDL_HAT_RIGHT
  | 0x04 -> SDL_HAT_DOWN
  | 0x08 -> SDL_HAT_LEFT
  | 0x03 -> SDL_HAT_RIGHTUP     (* 0x02 | 0x01 *)
  | 0x06 -> SDL_HAT_RIGHTDOWN (* 0x02 | 0x04 *)
  | 0x09 -> SDL_HAT_LEFTUP (* 0x08 | 0x01 *)
  | 0x0C -> SDL_HAT_LEFTDOWN (* 0x08 | 0x04 *)
  | _ -> failwith "No variant to match given value"
end
module Sdl_init_flags = struct
type t =
    SDL_INIT_NOPARACHUTE
  | SDL_INIT_EVERYTHING
  | SDL_INIT_EVENTS
  | SDL_INIT_GAMECONTROLLER
  | SDL_INIT_HAPTIC
  | SDL_INIT_JOYSTICK
  | SDL_INIT_VIDEO
  | SDL_INIT_AUDIO
  | SDL_INIT_TIMER

let to_int = function
  | SDL_INIT_TIMER -> 0x1
  | SDL_INIT_AUDIO -> 0x10
  | SDL_INIT_VIDEO -> 0x20
  | SDL_INIT_JOYSTICK -> 0x200
  | SDL_INIT_HAPTIC -> 0x1000
  | SDL_INIT_GAMECONTROLLER -> 0x2000
  | SDL_INIT_EVENTS -> 0x4000
  | SDL_INIT_NOPARACHUTE -> 0x100000
  | SDL_INIT_EVERYTHING -> 0x1 lor 0x10 lor 0x20 lor 0x200 lor 0x1000 lor 0x2000 lor 0x4000

let of_int = function
  | 0x1 -> SDL_INIT_TIMER
  | 0x10 -> SDL_INIT_AUDIO
  | 0x20 -> SDL_INIT_VIDEO
  | 0x200 -> SDL_INIT_JOYSTICK
  | 0x1000 -> SDL_INIT_HAPTIC
  | 0x2000 -> SDL_INIT_GAMECONTROLLER
  | 0x4000 -> SDL_INIT_EVENTS
  | 0x100000 -> SDL_INIT_NOPARACHUTE
  (* 0x01 | 0x10 | 0x20 | 0x200 | 0x1000 | 0x2000 | 0x4000 *)
  | 0x7231 -> SDL_INIT_EVERYTHING
  | _ -> failwith "No variant to match given value"

let list = [SDL_INIT_NOPARACHUTE;
            SDL_INIT_EVERYTHING;
            SDL_INIT_EVENTS;
            SDL_INIT_GAMECONTROLLER;
            SDL_INIT_HAPTIC;
            SDL_INIT_JOYSTICK;
            SDL_INIT_VIDEO;
            SDL_INIT_AUDIO;
            SDL_INIT_TIMER]
end
module Sdl_joy_device = struct
(* Provide SDL_JOYDEVICE* events mapping of variant to use in OCaml useful. *)
type t = [`ADDED |`REMOVED]

let to_int32 = function
  | `ADDED -> Sdl_event_type.SDL_JOYDEVICEADDED |> Sdl_event_type.to_int32
  | `REMOVED -> Sdl_event_type.SDL_JOYDEVICEREMOVED |> Sdl_event_type.to_int32

let of_int32 t =
  let added = Sdl_event_type.SDL_JOYDEVICEADDED |> Sdl_event_type.to_int32
  and removed = Sdl_event_type.SDL_JOYDEVICEREMOVED |> Sdl_event_type.to_int32 in
  match t with 
  | s when s = added -> `ADDED
  | s when s = removed -> `REMOVED
  | _ -> failwith "No variant matching with given value"
end
module Sdl_scancode = struct
type t =
    SDL_SCANCODE_0
  | SDL_SCANCODE_1
  | SDL_SCANCODE_2
  | SDL_SCANCODE_3
  | SDL_SCANCODE_4
  | SDL_SCANCODE_5
  | SDL_SCANCODE_6
  | SDL_SCANCODE_7
  | SDL_SCANCODE_8
  | SDL_SCANCODE_9
  | SDL_SCANCODE_A
  | SDL_SCANCODE_AC_BACK
  | SDL_SCANCODE_AC_BOOKMARKS
  | SDL_SCANCODE_AC_FORWARD
  | SDL_SCANCODE_AC_HOME
  | SDL_SCANCODE_AC_REFRESH
  | SDL_SCANCODE_AC_SEARCH
  | SDL_SCANCODE_AC_STOP
  | SDL_SCANCODE_AGAIN
  | SDL_SCANCODE_ALTERASE
  | SDL_SCANCODE_APOSTROPHE
  | SDL_SCANCODE_APPLICATION
  | SDL_SCANCODE_AUDIOMUTE
  | SDL_SCANCODE_AUDIONEXT
  | SDL_SCANCODE_AUDIOPLAY
  | SDL_SCANCODE_AUDIOPREV
  | SDL_SCANCODE_AUDIOSTOP
  | SDL_SCANCODE_B
  | SDL_SCANCODE_BACKSLASH
  | SDL_SCANCODE_BACKSPACE
  | SDL_SCANCODE_BRIGHTNESSDOWN
  | SDL_SCANCODE_BRIGHTNESSUP
  | SDL_SCANCODE_C
  | SDL_SCANCODE_CALCULATOR
  | SDL_SCANCODE_CANCEL
  | SDL_SCANCODE_CAPSLOCK
  | SDL_SCANCODE_CLEAR
  | SDL_SCANCODE_CLEARAGAIN
  | SDL_SCANCODE_COMMA
  | SDL_SCANCODE_COMPUTER
  | SDL_SCANCODE_COPY
  | SDL_SCANCODE_CRSEL
  | SDL_SCANCODE_CURRENCYSUBUNIT
  | SDL_SCANCODE_CURRENCYUNIT
  | SDL_SCANCODE_CUT
  | SDL_SCANCODE_D
  | SDL_SCANCODE_DECIMALSEPARATOR
  | SDL_SCANCODE_DELETE
  | SDL_SCANCODE_DISPLAYSWITCH
  | SDL_SCANCODE_DOWN
  | SDL_SCANCODE_E
  | SDL_SCANCODE_EJECT
  | SDL_SCANCODE_END
  | SDL_SCANCODE_EQUALS
  | SDL_SCANCODE_ESCAPE
  | SDL_SCANCODE_EXECUTE
  | SDL_SCANCODE_EXSEL
  | SDL_SCANCODE_F
  | SDL_SCANCODE_F1
  | SDL_SCANCODE_F10
  | SDL_SCANCODE_F11
  | SDL_SCANCODE_F12
  | SDL_SCANCODE_F13
  | SDL_SCANCODE_F14
  | SDL_SCANCODE_F15
  | SDL_SCANCODE_F16
  | SDL_SCANCODE_F17
  | SDL_SCANCODE_F18
  | SDL_SCANCODE_F19
  | SDL_SCANCODE_F2
  | SDL_SCANCODE_F20
  | SDL_SCANCODE_F21
  | SDL_SCANCODE_F22
  | SDL_SCANCODE_F23
  | SDL_SCANCODE_F24
  | SDL_SCANCODE_F3
  | SDL_SCANCODE_F4
  | SDL_SCANCODE_F5
  | SDL_SCANCODE_F6
  | SDL_SCANCODE_F7
  | SDL_SCANCODE_F8
  | SDL_SCANCODE_F9
  | SDL_SCANCODE_FIND
  | SDL_SCANCODE_G
  | SDL_SCANCODE_GRAVE
  | SDL_SCANCODE_H
  | SDL_SCANCODE_HELP
  | SDL_SCANCODE_HOME
  | SDL_SCANCODE_I
  | SDL_SCANCODE_INSERT
  | SDL_SCANCODE_J
  | SDL_SCANCODE_K
  | SDL_SCANCODE_KBDILLUMDOWN
  | SDL_SCANCODE_KBDILLUMTOGGLE
  | SDL_SCANCODE_KBDILLUMUP
  | SDL_SCANCODE_KP_0
  | SDL_SCANCODE_KP_00
  | SDL_SCANCODE_KP_000
  | SDL_SCANCODE_KP_1
  | SDL_SCANCODE_KP_2
  | SDL_SCANCODE_KP_3
  | SDL_SCANCODE_KP_4
  | SDL_SCANCODE_KP_5
  | SDL_SCANCODE_KP_6
  | SDL_SCANCODE_KP_7
  | SDL_SCANCODE_KP_8
  | SDL_SCANCODE_KP_9
  | SDL_SCANCODE_KP_A
  | SDL_SCANCODE_KP_AMPERSAND
  | SDL_SCANCODE_KP_AT
  | SDL_SCANCODE_KP_B
  | SDL_SCANCODE_KP_BACKSPACE
  | SDL_SCANCODE_KP_BINARY
  | SDL_SCANCODE_KP_C
  | SDL_SCANCODE_KP_CLEAR
  | SDL_SCANCODE_KP_CLEARENTRY
  | SDL_SCANCODE_KP_COLON
  | SDL_SCANCODE_KP_COMMA
  | SDL_SCANCODE_KP_D
  | SDL_SCANCODE_KP_DBLAMPERSAND
  | SDL_SCANCODE_KP_DBLVERTICALBAR
  | SDL_SCANCODE_KP_DECIMAL
  | SDL_SCANCODE_KP_DIVIDE
  | SDL_SCANCODE_KP_E
  | SDL_SCANCODE_KP_ENTER
  | SDL_SCANCODE_KP_EQUALS
  | SDL_SCANCODE_KP_EQUALSAS400
  | SDL_SCANCODE_KP_EXCLAM
  | SDL_SCANCODE_KP_F
  | SDL_SCANCODE_KP_GREATER
  | SDL_SCANCODE_KP_HASH
  | SDL_SCANCODE_KP_HEXADECIMAL
  | SDL_SCANCODE_KP_LEFTBRACE
  | SDL_SCANCODE_KP_LEFTPAREN
  | SDL_SCANCODE_KP_LESS
  | SDL_SCANCODE_KP_MEMADD
  | SDL_SCANCODE_KP_MEMCLEAR
  | SDL_SCANCODE_KP_MEMDIVIDE
  | SDL_SCANCODE_KP_MEMMULTIPLY
  | SDL_SCANCODE_KP_MEMRECALL
  | SDL_SCANCODE_KP_MEMSTORE
  | SDL_SCANCODE_KP_MEMSUBTRACT
  | SDL_SCANCODE_KP_MINUS
  | SDL_SCANCODE_KP_MULTIPLY
  | SDL_SCANCODE_KP_OCTAL
  | SDL_SCANCODE_KP_PERCENT
  | SDL_SCANCODE_KP_PERIOD
  | SDL_SCANCODE_KP_PLUS
  | SDL_SCANCODE_KP_PLUSMINUS
  | SDL_SCANCODE_KP_POWER
  | SDL_SCANCODE_KP_RIGHTBRACE
  | SDL_SCANCODE_KP_RIGHTPAREN
  | SDL_SCANCODE_KP_SPACE
  | SDL_SCANCODE_KP_TAB
  | SDL_SCANCODE_KP_VERTICALBAR
  | SDL_SCANCODE_KP_XOR
  | SDL_SCANCODE_L
  | SDL_SCANCODE_LALT
  | SDL_SCANCODE_LCTRL
  | SDL_SCANCODE_LEFT
  | SDL_SCANCODE_LEFTBRACKET
  | SDL_SCANCODE_LGUI
  | SDL_SCANCODE_LSHIFT
  | SDL_SCANCODE_M
  | SDL_SCANCODE_MAIL
  | SDL_SCANCODE_MEDIASELECT
  | SDL_SCANCODE_MENU
  | SDL_SCANCODE_MINUS
  | SDL_SCANCODE_MODE
  | SDL_SCANCODE_MUTE
  | SDL_SCANCODE_N
  | SDL_SCANCODE_NUMLOCKCLEAR
  | SDL_SCANCODE_O
  | SDL_SCANCODE_OPER
  | SDL_SCANCODE_OUT
  | SDL_SCANCODE_P
  | SDL_SCANCODE_PAGEDOWN
  | SDL_SCANCODE_PAGEUP
  | SDL_SCANCODE_PASTE
  | SDL_SCANCODE_PAUSE
  | SDL_SCANCODE_PERIOD
  | SDL_SCANCODE_POWER
  | SDL_SCANCODE_PRINTSCREEN
  | SDL_SCANCODE_PRIOR
  | SDL_SCANCODE_Q
  | SDL_SCANCODE_R
  | SDL_SCANCODE_RALT
  | SDL_SCANCODE_RCTRL
  | SDL_SCANCODE_RETURN
  | SDL_SCANCODE_RETURN2
  | SDL_SCANCODE_RGUI
  | SDL_SCANCODE_RIGHT
  | SDL_SCANCODE_RIGHTBRACKET
  | SDL_SCANCODE_RSHIFT
  | SDL_SCANCODE_S
  | SDL_SCANCODE_SCROLLLOCK
  | SDL_SCANCODE_SELECT
  | SDL_SCANCODE_SEMICOLON
  | SDL_SCANCODE_SEPARATOR
  | SDL_SCANCODE_SLASH
  | SDL_SCANCODE_SLEEP
  | SDL_SCANCODE_SPACE
  | SDL_SCANCODE_STOP
  | SDL_SCANCODE_SYSREQ
  | SDL_SCANCODE_T
  | SDL_SCANCODE_TAB
  | SDL_SCANCODE_THOUSANDSSEPARATOR
  | SDL_SCANCODE_U
  | SDL_SCANCODE_UNDO
  | SDL_SCANCODE_UP
  | SDL_SCANCODE_V
  | SDL_SCANCODE_VOLUMEDOWN
  | SDL_SCANCODE_VOLUMEUP
  | SDL_SCANCODE_W
  | SDL_SCANCODE_WWW
  | SDL_SCANCODE_X
  | SDL_SCANCODE_Y
  | SDL_SCANCODE_Z
  | SDL_SCANCODE_INTERNATIONAL1
  | SDL_SCANCODE_INTERNATIONAL2
  | SDL_SCANCODE_INTERNATIONAL3
  | SDL_SCANCODE_INTERNATIONAL4
  | SDL_SCANCODE_INTERNATIONAL5
  | SDL_SCANCODE_INTERNATIONAL6
  | SDL_SCANCODE_INTERNATIONAL7
  | SDL_SCANCODE_INTERNATIONAL8
  | SDL_SCANCODE_INTERNATIONAL9
  | SDL_SCANCODE_LANG1
  | SDL_SCANCODE_LANG2
  | SDL_SCANCODE_LANG3
  | SDL_SCANCODE_LANG4
  | SDL_SCANCODE_LANG5
  | SDL_SCANCODE_LANG6
  | SDL_SCANCODE_LANG7
  | SDL_SCANCODE_LANG8
  | SDL_SCANCODE_LANG9
  | SDL_SCANCODE_NONUSBACKSLASH
  | SDL_SCANCODE_NONUSHASH

let to_int = function
  |  SDL_SCANCODE_A  -> 4
  |  SDL_SCANCODE_B  -> 5
  |  SDL_SCANCODE_C  -> 6
  |  SDL_SCANCODE_D  -> 7
  |  SDL_SCANCODE_E  -> 8
  |  SDL_SCANCODE_F  -> 9
  |  SDL_SCANCODE_G  -> 10
  |  SDL_SCANCODE_H  -> 11
  |  SDL_SCANCODE_I  -> 12
  |  SDL_SCANCODE_J  -> 13
  |  SDL_SCANCODE_K  -> 14
  |  SDL_SCANCODE_L  -> 15
  |  SDL_SCANCODE_M  -> 16
  |  SDL_SCANCODE_N  -> 17
  |  SDL_SCANCODE_O  -> 18
  |  SDL_SCANCODE_P  -> 19
  |  SDL_SCANCODE_Q  -> 20
  |  SDL_SCANCODE_R  -> 21
  |  SDL_SCANCODE_S  -> 22
  |  SDL_SCANCODE_T  -> 23
  |  SDL_SCANCODE_U  -> 24
  |  SDL_SCANCODE_V  -> 25
  |  SDL_SCANCODE_W  -> 26
  |  SDL_SCANCODE_X  -> 27
  |  SDL_SCANCODE_Y  -> 28
  |  SDL_SCANCODE_Z  -> 29
  |  SDL_SCANCODE_1  -> 30
  |  SDL_SCANCODE_2  -> 31
  |  SDL_SCANCODE_3  -> 32
  |  SDL_SCANCODE_4  -> 33
  |  SDL_SCANCODE_5  -> 34
  |  SDL_SCANCODE_6  -> 35
  |  SDL_SCANCODE_7  -> 36
  |  SDL_SCANCODE_8  -> 37
  |  SDL_SCANCODE_9  -> 38
  |  SDL_SCANCODE_0  -> 39
  |  SDL_SCANCODE_RETURN  -> 40
  |  SDL_SCANCODE_ESCAPE  -> 41
  |  SDL_SCANCODE_BACKSPACE  -> 42
  |  SDL_SCANCODE_TAB  -> 43
  |  SDL_SCANCODE_SPACE  -> 44
  |  SDL_SCANCODE_MINUS  -> 45
  |  SDL_SCANCODE_EQUALS  -> 46
  |  SDL_SCANCODE_LEFTBRACKET  -> 47
  |  SDL_SCANCODE_RIGHTBRACKET  -> 48
  |  SDL_SCANCODE_BACKSLASH  -> 49
  |  SDL_SCANCODE_NONUSHASH  -> 50
  |  SDL_SCANCODE_SEMICOLON  -> 51
  |  SDL_SCANCODE_APOSTROPHE  -> 52
  |  SDL_SCANCODE_GRAVE  -> 53
  |  SDL_SCANCODE_COMMA  -> 54
  |  SDL_SCANCODE_PERIOD  -> 55
  |  SDL_SCANCODE_SLASH  -> 56
  |  SDL_SCANCODE_CAPSLOCK  -> 57
  |  SDL_SCANCODE_F1  -> 58
  |  SDL_SCANCODE_F2  -> 59
  |  SDL_SCANCODE_F3  -> 60
  |  SDL_SCANCODE_F4  -> 61
  |  SDL_SCANCODE_F5  -> 62
  |  SDL_SCANCODE_F6  -> 63
  |  SDL_SCANCODE_F7  -> 64
  |  SDL_SCANCODE_F8  -> 65
  |  SDL_SCANCODE_F9  -> 66
  |  SDL_SCANCODE_F10  -> 67
  |  SDL_SCANCODE_F11  -> 68
  |  SDL_SCANCODE_F12  -> 69
  |  SDL_SCANCODE_PRINTSCREEN  -> 70
  |  SDL_SCANCODE_SCROLLLOCK  -> 71
  |  SDL_SCANCODE_PAUSE  -> 72
  |  SDL_SCANCODE_INSERT  -> 73
  |  SDL_SCANCODE_HOME  -> 74
  |  SDL_SCANCODE_PAGEUP  -> 75
  |  SDL_SCANCODE_DELETE  -> 76
  |  SDL_SCANCODE_END  -> 77
  |  SDL_SCANCODE_PAGEDOWN  -> 78
  |  SDL_SCANCODE_RIGHT  -> 79
  |  SDL_SCANCODE_LEFT  -> 80
  |  SDL_SCANCODE_DOWN  -> 81
  |  SDL_SCANCODE_UP  -> 82
  |  SDL_SCANCODE_NUMLOCKCLEAR  -> 83
  |  SDL_SCANCODE_KP_DIVIDE  -> 84
  | SDL_SCANCODE_KP_MULTIPLY  -> 85
  | SDL_SCANCODE_KP_MINUS  -> 86
  | SDL_SCANCODE_KP_PLUS  -> 87
  | SDL_SCANCODE_KP_ENTER  -> 88
  | SDL_SCANCODE_KP_1  -> 89
  | SDL_SCANCODE_KP_2  -> 90
  | SDL_SCANCODE_KP_3  -> 91
  | SDL_SCANCODE_KP_4  -> 92
  | SDL_SCANCODE_KP_5  -> 93
  | SDL_SCANCODE_KP_6  -> 94
  | SDL_SCANCODE_KP_7  -> 95
  | SDL_SCANCODE_KP_8  -> 96
  | SDL_SCANCODE_KP_9  -> 97
  | SDL_SCANCODE_KP_0  -> 98
  | SDL_SCANCODE_KP_PERIOD  -> 99
  | SDL_SCANCODE_NONUSBACKSLASH  -> 100
  | SDL_SCANCODE_APPLICATION  -> 101
  | SDL_SCANCODE_POWER  -> 102
  | SDL_SCANCODE_KP_EQUALS  -> 103
  | SDL_SCANCODE_F13  -> 104
  | SDL_SCANCODE_F14  -> 105
  | SDL_SCANCODE_F15  -> 106
  | SDL_SCANCODE_F16  -> 107
  | SDL_SCANCODE_F17  -> 108
  | SDL_SCANCODE_F18  -> 109
  | SDL_SCANCODE_F19  -> 110
  | SDL_SCANCODE_F20  -> 111
  | SDL_SCANCODE_F21  -> 112
  | SDL_SCANCODE_F22  -> 113
  | SDL_SCANCODE_F23  -> 114
  | SDL_SCANCODE_F24  -> 115
  | SDL_SCANCODE_EXECUTE  -> 116
  | SDL_SCANCODE_HELP  -> 117
  | SDL_SCANCODE_MENU  -> 118
  | SDL_SCANCODE_SELECT  -> 119
  | SDL_SCANCODE_STOP  -> 120
  | SDL_SCANCODE_AGAIN  -> 121
  | SDL_SCANCODE_UNDO  -> 122
  | SDL_SCANCODE_CUT  -> 123
  | SDL_SCANCODE_COPY  -> 124
  | SDL_SCANCODE_PASTE  -> 125
  | SDL_SCANCODE_FIND  -> 126
  | SDL_SCANCODE_MUTE  -> 127
  | SDL_SCANCODE_VOLUMEUP  -> 128
  | SDL_SCANCODE_VOLUMEDOWN  -> 129
  | SDL_SCANCODE_KP_COMMA  -> 133
  | SDL_SCANCODE_KP_EQUALSAS400  -> 134
  | SDL_SCANCODE_INTERNATIONAL1  -> 135
  | SDL_SCANCODE_INTERNATIONAL2  -> 136
  | SDL_SCANCODE_INTERNATIONAL3  -> 137
  | SDL_SCANCODE_INTERNATIONAL4  -> 138
  | SDL_SCANCODE_INTERNATIONAL5  -> 139
  | SDL_SCANCODE_INTERNATIONAL6  -> 140
  | SDL_SCANCODE_INTERNATIONAL7  -> 141
  | SDL_SCANCODE_INTERNATIONAL8  -> 142
  | SDL_SCANCODE_INTERNATIONAL9  -> 143
  | SDL_SCANCODE_LANG1  -> 144
  | SDL_SCANCODE_LANG2  -> 145
  | SDL_SCANCODE_LANG3  -> 146
  | SDL_SCANCODE_LANG4  -> 147
  | SDL_SCANCODE_LANG5  -> 148
  | SDL_SCANCODE_LANG6  -> 149
  | SDL_SCANCODE_LANG7  -> 150
  | SDL_SCANCODE_LANG8  -> 151
  | SDL_SCANCODE_LANG9  -> 152
  | SDL_SCANCODE_ALTERASE  -> 153
  | SDL_SCANCODE_SYSREQ  -> 154
  | SDL_SCANCODE_CANCEL  -> 155
  | SDL_SCANCODE_CLEAR  -> 156
  | SDL_SCANCODE_PRIOR  -> 157
  | SDL_SCANCODE_RETURN2  -> 158
  | SDL_SCANCODE_SEPARATOR  -> 159
  | SDL_SCANCODE_OUT  -> 160
  | SDL_SCANCODE_OPER  -> 161
  | SDL_SCANCODE_CLEARAGAIN  -> 162
  | SDL_SCANCODE_CRSEL  -> 163
  | SDL_SCANCODE_EXSEL  -> 164
  | SDL_SCANCODE_KP_00  -> 176
  | SDL_SCANCODE_KP_000  -> 177
  | SDL_SCANCODE_THOUSANDSSEPARATOR  -> 178
  | SDL_SCANCODE_DECIMALSEPARATOR  -> 179
  | SDL_SCANCODE_CURRENCYUNIT  -> 180
  | SDL_SCANCODE_CURRENCYSUBUNIT  -> 181
  | SDL_SCANCODE_KP_LEFTPAREN  -> 182
  | SDL_SCANCODE_KP_RIGHTPAREN  -> 183
  | SDL_SCANCODE_KP_LEFTBRACE  -> 184
  | SDL_SCANCODE_KP_RIGHTBRACE  -> 185
  | SDL_SCANCODE_KP_TAB  -> 186
  | SDL_SCANCODE_KP_BACKSPACE  -> 187
  | SDL_SCANCODE_KP_A  -> 188
  | SDL_SCANCODE_KP_B  -> 189
  | SDL_SCANCODE_KP_C  -> 190
  | SDL_SCANCODE_KP_D  -> 191
  | SDL_SCANCODE_KP_E  -> 192
  | SDL_SCANCODE_KP_F  -> 193
  | SDL_SCANCODE_KP_XOR  -> 194
  | SDL_SCANCODE_KP_POWER  -> 195
  | SDL_SCANCODE_KP_PERCENT  -> 196
  | SDL_SCANCODE_KP_LESS  -> 197
  | SDL_SCANCODE_KP_GREATER  -> 198
  | SDL_SCANCODE_KP_AMPERSAND  -> 199
  | SDL_SCANCODE_KP_DBLAMPERSAND  -> 200
  | SDL_SCANCODE_KP_VERTICALBAR  -> 201
  | SDL_SCANCODE_KP_DBLVERTICALBAR  -> 202
  | SDL_SCANCODE_KP_COLON  -> 203
  | SDL_SCANCODE_KP_HASH  -> 204
  | SDL_SCANCODE_KP_SPACE  -> 205
  | SDL_SCANCODE_KP_AT  -> 206
  | SDL_SCANCODE_KP_EXCLAM  -> 207
  | SDL_SCANCODE_KP_MEMSTORE  -> 208
  | SDL_SCANCODE_KP_MEMRECALL  -> 209
  | SDL_SCANCODE_KP_MEMCLEAR  -> 210
  | SDL_SCANCODE_KP_MEMADD  -> 211
  | SDL_SCANCODE_KP_MEMSUBTRACT  -> 212
  | SDL_SCANCODE_KP_MEMMULTIPLY  -> 213
  | SDL_SCANCODE_KP_MEMDIVIDE  -> 214
  | SDL_SCANCODE_KP_PLUSMINUS  -> 215
  | SDL_SCANCODE_KP_CLEAR  -> 216
  | SDL_SCANCODE_KP_CLEARENTRY  -> 217
  | SDL_SCANCODE_KP_BINARY  -> 218
  | SDL_SCANCODE_KP_OCTAL  -> 219
  | SDL_SCANCODE_KP_DECIMAL  -> 220
  | SDL_SCANCODE_KP_HEXADECIMAL  -> 221
  | SDL_SCANCODE_LCTRL  -> 224
  | SDL_SCANCODE_LSHIFT  -> 225
  | SDL_SCANCODE_LALT  -> 226
  | SDL_SCANCODE_LGUI  -> 227
  | SDL_SCANCODE_RCTRL  -> 228
  | SDL_SCANCODE_RSHIFT  -> 229
  | SDL_SCANCODE_RALT  -> 230
  | SDL_SCANCODE_RGUI  -> 231
  | SDL_SCANCODE_MODE  -> 257
  | SDL_SCANCODE_AUDIONEXT  -> 258
  | SDL_SCANCODE_AUDIOPREV  -> 259
  | SDL_SCANCODE_AUDIOSTOP  -> 260
  | SDL_SCANCODE_AUDIOPLAY  -> 261
  | SDL_SCANCODE_AUDIOMUTE  -> 262
  | SDL_SCANCODE_MEDIASELECT  -> 263
  | SDL_SCANCODE_WWW  -> 264
  | SDL_SCANCODE_MAIL  -> 265
  | SDL_SCANCODE_CALCULATOR  -> 266
  | SDL_SCANCODE_COMPUTER  -> 267
  | SDL_SCANCODE_AC_SEARCH  -> 268
  | SDL_SCANCODE_AC_HOME  -> 269
  | SDL_SCANCODE_AC_BACK  -> 270
  | SDL_SCANCODE_AC_FORWARD  -> 271
  | SDL_SCANCODE_AC_STOP  -> 272
  | SDL_SCANCODE_AC_REFRESH  -> 273
  | SDL_SCANCODE_AC_BOOKMARKS  -> 274
  | SDL_SCANCODE_BRIGHTNESSDOWN  -> 275
  | SDL_SCANCODE_BRIGHTNESSUP  -> 276
  | SDL_SCANCODE_DISPLAYSWITCH  -> 277
  | SDL_SCANCODE_KBDILLUMTOGGLE  -> 278
  | SDL_SCANCODE_KBDILLUMDOWN  -> 279
  | SDL_SCANCODE_KBDILLUMUP  -> 280
  | SDL_SCANCODE_EJECT  -> 281
  | SDL_SCANCODE_SLEEP  -> 282

let of_int = function
  | 4 -> SDL_SCANCODE_A
  | 5 -> SDL_SCANCODE_B
  | 6 -> SDL_SCANCODE_C
  | 7 -> SDL_SCANCODE_D
  | 8 -> SDL_SCANCODE_E
  | 9 -> SDL_SCANCODE_F
  | 10 -> SDL_SCANCODE_G
  | 11 -> SDL_SCANCODE_H
  | 12 -> SDL_SCANCODE_I
  | 13 -> SDL_SCANCODE_J
  | 14 -> SDL_SCANCODE_K
  | 15 -> SDL_SCANCODE_L
  | 16 -> SDL_SCANCODE_M
  | 17 -> SDL_SCANCODE_N
  | 18 -> SDL_SCANCODE_O
  | 19 -> SDL_SCANCODE_P
  | 20 -> SDL_SCANCODE_Q
  | 21 -> SDL_SCANCODE_R
  | 22 -> SDL_SCANCODE_S
  | 23 -> SDL_SCANCODE_T
  | 24 -> SDL_SCANCODE_U
  | 25 -> SDL_SCANCODE_V
  | 26 -> SDL_SCANCODE_W
  | 27 -> SDL_SCANCODE_X
  | 28 -> SDL_SCANCODE_Y
  | 29 -> SDL_SCANCODE_Z
  | 30 -> SDL_SCANCODE_1
  | 31 -> SDL_SCANCODE_2
  | 32 -> SDL_SCANCODE_3
  | 33 -> SDL_SCANCODE_4
  | 34 -> SDL_SCANCODE_5
  | 35 -> SDL_SCANCODE_6
  | 36 -> SDL_SCANCODE_7
  | 37 -> SDL_SCANCODE_8
  | 38 -> SDL_SCANCODE_9
  | 39 -> SDL_SCANCODE_0
  | 40 -> SDL_SCANCODE_RETURN
  | 41 -> SDL_SCANCODE_ESCAPE
  | 42 -> SDL_SCANCODE_BACKSPACE
  | 43 -> SDL_SCANCODE_TAB
  | 44 -> SDL_SCANCODE_SPACE
  | 45 -> SDL_SCANCODE_MINUS
  | 46 -> SDL_SCANCODE_EQUALS
  | 47 -> SDL_SCANCODE_LEFTBRACKET
  | 48 -> SDL_SCANCODE_RIGHTBRACKET
  | 49 -> SDL_SCANCODE_BACKSLASH
  | 50 -> SDL_SCANCODE_NONUSHASH
  | 51 -> SDL_SCANCODE_SEMICOLON
  | 52 -> SDL_SCANCODE_APOSTROPHE
  | 53 -> SDL_SCANCODE_GRAVE
  | 54 -> SDL_SCANCODE_COMMA
  | 55 -> SDL_SCANCODE_PERIOD
  | 56 -> SDL_SCANCODE_SLASH
  | 57 -> SDL_SCANCODE_CAPSLOCK
  | 58 -> SDL_SCANCODE_F1
  | 59 -> SDL_SCANCODE_F2
  | 60 -> SDL_SCANCODE_F3
  | 61 -> SDL_SCANCODE_F4
  | 62 -> SDL_SCANCODE_F5
  | 63 -> SDL_SCANCODE_F6
  | 64 -> SDL_SCANCODE_F7
  | 65 -> SDL_SCANCODE_F8
  | 66 -> SDL_SCANCODE_F9
  | 67 -> SDL_SCANCODE_F10
  | 68 -> SDL_SCANCODE_F11
  | 69 -> SDL_SCANCODE_F12
  | 70 -> SDL_SCANCODE_PRINTSCREEN
  | 71 -> SDL_SCANCODE_SCROLLLOCK
  | 72 -> SDL_SCANCODE_PAUSE
  | 73 -> SDL_SCANCODE_INSERT
  | 74 -> SDL_SCANCODE_HOME
  | 75 -> SDL_SCANCODE_PAGEUP
  | 76 -> SDL_SCANCODE_DELETE
  | 77 -> SDL_SCANCODE_END
  | 78 -> SDL_SCANCODE_PAGEDOWN
  | 79 -> SDL_SCANCODE_RIGHT
  | 80 -> SDL_SCANCODE_LEFT
  | 81 -> SDL_SCANCODE_DOWN
  | 82 -> SDL_SCANCODE_UP
  | 83 -> SDL_SCANCODE_NUMLOCKCLEAR
  | 84 -> SDL_SCANCODE_KP_DIVIDE
  | 85 -> SDL_SCANCODE_KP_MULTIPLY
  | 86 -> SDL_SCANCODE_KP_MINUS
  | 87 -> SDL_SCANCODE_KP_PLUS
  | 88 -> SDL_SCANCODE_KP_ENTER
  | 89 -> SDL_SCANCODE_KP_1
  | 90 -> SDL_SCANCODE_KP_2
  | 91 -> SDL_SCANCODE_KP_3
  | 92 -> SDL_SCANCODE_KP_4
  | 93 -> SDL_SCANCODE_KP_5
  | 94 -> SDL_SCANCODE_KP_6
  | 95 -> SDL_SCANCODE_KP_7
  | 96 -> SDL_SCANCODE_KP_8
  | 97 -> SDL_SCANCODE_KP_9
  | 98 -> SDL_SCANCODE_KP_0
  | 99 -> SDL_SCANCODE_KP_PERIOD
  | 100 -> SDL_SCANCODE_NONUSBACKSLASH
  | 101 -> SDL_SCANCODE_APPLICATION
  | 102 -> SDL_SCANCODE_POWER
  | 103 -> SDL_SCANCODE_KP_EQUALS
  | 104 -> SDL_SCANCODE_F13
  | 105 -> SDL_SCANCODE_F14
  | 106 -> SDL_SCANCODE_F15
  | 107 -> SDL_SCANCODE_F16
  | 108 -> SDL_SCANCODE_F17
  | 109 -> SDL_SCANCODE_F18
  | 110 -> SDL_SCANCODE_F19
  | 111 -> SDL_SCANCODE_F20
  | 112 -> SDL_SCANCODE_F21
  | 113 -> SDL_SCANCODE_F22
  | 114 -> SDL_SCANCODE_F23
  | 115 -> SDL_SCANCODE_F24
  | 116 -> SDL_SCANCODE_EXECUTE
  | 117 -> SDL_SCANCODE_HELP
  | 118 -> SDL_SCANCODE_MENU
  | 119 -> SDL_SCANCODE_SELECT
  | 120 -> SDL_SCANCODE_STOP
  | 121 -> SDL_SCANCODE_AGAIN
  | 122 -> SDL_SCANCODE_UNDO
  | 123 -> SDL_SCANCODE_CUT
  | 124 -> SDL_SCANCODE_COPY
  | 125 -> SDL_SCANCODE_PASTE
  | 126 -> SDL_SCANCODE_FIND
  | 127 -> SDL_SCANCODE_MUTE
  | 128 -> SDL_SCANCODE_VOLUMEUP
  | 129 -> SDL_SCANCODE_VOLUMEDOWN
  | 133 -> SDL_SCANCODE_KP_COMMA
  | 134 -> SDL_SCANCODE_KP_EQUALSAS400
  | 135 -> SDL_SCANCODE_INTERNATIONAL1
  | 136 -> SDL_SCANCODE_INTERNATIONAL2
  | 137 -> SDL_SCANCODE_INTERNATIONAL3
  | 138 -> SDL_SCANCODE_INTERNATIONAL4
  | 139 -> SDL_SCANCODE_INTERNATIONAL5
  | 140 -> SDL_SCANCODE_INTERNATIONAL6
  | 141 -> SDL_SCANCODE_INTERNATIONAL7
  | 142 -> SDL_SCANCODE_INTERNATIONAL8
  | 143 -> SDL_SCANCODE_INTERNATIONAL9
  | 144 -> SDL_SCANCODE_LANG1
  | 145 -> SDL_SCANCODE_LANG2
  | 146 -> SDL_SCANCODE_LANG3
  | 147 -> SDL_SCANCODE_LANG4
  | 148 -> SDL_SCANCODE_LANG5
  | 149 -> SDL_SCANCODE_LANG6
  | 150 -> SDL_SCANCODE_LANG7
  | 151 -> SDL_SCANCODE_LANG8
  | 152 -> SDL_SCANCODE_LANG9
  | 153 -> SDL_SCANCODE_ALTERASE
  | 154 -> SDL_SCANCODE_SYSREQ
  | 155 -> SDL_SCANCODE_CANCEL
  | 156 -> SDL_SCANCODE_CLEAR
  | 157 -> SDL_SCANCODE_PRIOR
  | 158 -> SDL_SCANCODE_RETURN2
  | 159 -> SDL_SCANCODE_SEPARATOR
  | 160 -> SDL_SCANCODE_OUT
  | 161 -> SDL_SCANCODE_OPER
  | 162 -> SDL_SCANCODE_CLEARAGAIN
  | 163 -> SDL_SCANCODE_CRSEL
  | 164 -> SDL_SCANCODE_EXSEL
  | 176 -> SDL_SCANCODE_KP_00
  | 177 -> SDL_SCANCODE_KP_000
  | 178 -> SDL_SCANCODE_THOUSANDSSEPARATOR
  | 179 -> SDL_SCANCODE_DECIMALSEPARATOR
  | 180 -> SDL_SCANCODE_CURRENCYUNIT
  | 181 -> SDL_SCANCODE_CURRENCYSUBUNIT
  | 182 -> SDL_SCANCODE_KP_LEFTPAREN
  | 183 -> SDL_SCANCODE_KP_RIGHTPAREN
  | 184 -> SDL_SCANCODE_KP_LEFTBRACE
  | 185 -> SDL_SCANCODE_KP_RIGHTBRACE
  | 186 -> SDL_SCANCODE_KP_TAB
  | 187 -> SDL_SCANCODE_KP_BACKSPACE
  | 188 -> SDL_SCANCODE_KP_A
  | 189 -> SDL_SCANCODE_KP_B
  | 190 -> SDL_SCANCODE_KP_C
  | 191 -> SDL_SCANCODE_KP_D
  | 192 -> SDL_SCANCODE_KP_E
  | 193 -> SDL_SCANCODE_KP_F
  | 194 -> SDL_SCANCODE_KP_XOR
  | 195 -> SDL_SCANCODE_KP_POWER
  | 196 -> SDL_SCANCODE_KP_PERCENT
  | 197 -> SDL_SCANCODE_KP_LESS
  | 198 -> SDL_SCANCODE_KP_GREATER
  | 199 -> SDL_SCANCODE_KP_AMPERSAND
  | 200 -> SDL_SCANCODE_KP_DBLAMPERSAND
  | 201 -> SDL_SCANCODE_KP_VERTICALBAR
  | 202 -> SDL_SCANCODE_KP_DBLVERTICALBAR
  | 203 -> SDL_SCANCODE_KP_COLON
  | 204 -> SDL_SCANCODE_KP_HASH
  | 205 -> SDL_SCANCODE_KP_SPACE
  | 206 -> SDL_SCANCODE_KP_AT
  | 207 -> SDL_SCANCODE_KP_EXCLAM
  | 208 -> SDL_SCANCODE_KP_MEMSTORE
  | 209 -> SDL_SCANCODE_KP_MEMRECALL
  | 210 -> SDL_SCANCODE_KP_MEMCLEAR
  | 211 -> SDL_SCANCODE_KP_MEMADD
  | 212 -> SDL_SCANCODE_KP_MEMSUBTRACT
  | 213 -> SDL_SCANCODE_KP_MEMMULTIPLY
  | 214 -> SDL_SCANCODE_KP_MEMDIVIDE
  | 215 -> SDL_SCANCODE_KP_PLUSMINUS
  | 216 -> SDL_SCANCODE_KP_CLEAR
  | 217 -> SDL_SCANCODE_KP_CLEARENTRY
  | 218 -> SDL_SCANCODE_KP_BINARY
  | 219 -> SDL_SCANCODE_KP_OCTAL
  | 220 -> SDL_SCANCODE_KP_DECIMAL
  | 221 -> SDL_SCANCODE_KP_HEXADECIMAL
  | 224 -> SDL_SCANCODE_LCTRL
  | 225 -> SDL_SCANCODE_LSHIFT
  | 226 -> SDL_SCANCODE_LALT
  | 227 -> SDL_SCANCODE_LGUI
  | 228 -> SDL_SCANCODE_RCTRL
  | 229 -> SDL_SCANCODE_RSHIFT
  | 230 -> SDL_SCANCODE_RALT
  | 231 -> SDL_SCANCODE_RGUI
  | 257 -> SDL_SCANCODE_MODE
  | 258 -> SDL_SCANCODE_AUDIONEXT
  | 259 -> SDL_SCANCODE_AUDIOPREV
  | 260 -> SDL_SCANCODE_AUDIOSTOP
  | 261 -> SDL_SCANCODE_AUDIOPLAY
  | 262 -> SDL_SCANCODE_AUDIOMUTE
  | 263 -> SDL_SCANCODE_MEDIASELECT
  | 264 -> SDL_SCANCODE_WWW
  | 265 -> SDL_SCANCODE_MAIL
  | 266 -> SDL_SCANCODE_CALCULATOR
  | 267 -> SDL_SCANCODE_COMPUTER
  | 268 -> SDL_SCANCODE_AC_SEARCH
  | 269 -> SDL_SCANCODE_AC_HOME
  | 270 -> SDL_SCANCODE_AC_BACK
  | 271 -> SDL_SCANCODE_AC_FORWARD
  | 272 -> SDL_SCANCODE_AC_STOP
  | 273 -> SDL_SCANCODE_AC_REFRESH
  | 274 -> SDL_SCANCODE_AC_BOOKMARKS
  | 275 -> SDL_SCANCODE_BRIGHTNESSDOWN
  | 276 -> SDL_SCANCODE_BRIGHTNESSUP
  | 277 -> SDL_SCANCODE_DISPLAYSWITCH
  | 278 -> SDL_SCANCODE_KBDILLUMTOGGLE
  | 279 -> SDL_SCANCODE_KBDILLUMDOWN
  | 280 -> SDL_SCANCODE_KBDILLUMUP
  | 281 -> SDL_SCANCODE_EJECT
  | 282 -> SDL_SCANCODE_SLEEP
  | _ -> failwith "No scan code match given value"
end
module Sdl_keycode = struct
type t =
    SDLK_0
  | SDLK_1
  | SDLK_2
  | SDLK_3
  | SDLK_4
  | SDLK_5
  | SDLK_6
  | SDLK_7
  | SDLK_8
  | SDLK_9
  | SDLK_a
  | SDLK_AC_BACK
  | SDLK_AC_BOOKMARKS
  | SDLK_AC_FORWARD
  | SDLK_AC_HOME
  | SDLK_AC_REFRESH
  | SDLK_AC_SEARCH
  | SDLK_AC_STOP
  | SDLK_AGAIN
  | SDLK_ALTERASE
  | SDLK_QUOTE
  | SDLK_APPLICATION
  | SDLK_AUDIOMUTE
  | SDLK_AUDIONEXT
  | SDLK_AUDIOPLAY
  | SDLK_AUDIOPREV
  | SDLK_AUDIOSTOP
  | SDLK_b
  | SDLK_BACKSLASH
  | SDLK_BACKSPACE
  | SDLK_BRIGHTNESSDOWN
  | SDLK_BRIGHTNESSUP
  | SDLK_c
  | SDLK_CALCULATOR
  | SDLK_CANCEL
  | SDLK_CAPSLOCK
  | SDLK_CLEAR
  | SDLK_CLEARAGAIN
  | SDLK_COMMA
  | SDLK_COMPUTER
  | SDLK_COPY
  | SDLK_CRSEL
  | SDLK_CURRENCYSUBUNIT
  | SDLK_CURRENCYUNIT
  | SDLK_CUT
  | SDLK_d
  | SDLK_DECIMALSEPARATOR
  | SDLK_DELETE
  | SDLK_DISPLAYSWITCH
  | SDLK_DOWN
  | SDLK_e
  | SDLK_EJECT
  | SDLK_END
  | SDLK_EQUALS
  | SDLK_ESCAPE
  | SDLK_EXECUTE
  | SDLK_EXSEL
  | SDLK_f
  | SDLK_F1
  | SDLK_F10
  | SDLK_F11
  | SDLK_F12
  | SDLK_F13
  | SDLK_F14
  | SDLK_F15
  | SDLK_F16
  | SDLK_F17
  | SDLK_F18
  | SDLK_F19
  | SDLK_F2
  | SDLK_F20
  | SDLK_F21
  | SDLK_F22
  | SDLK_F23
  | SDLK_F24
  | SDLK_F3
  | SDLK_F4
  | SDLK_F5
  | SDLK_F6
  | SDLK_F7
  | SDLK_F8
  | SDLK_F9
  | SDLK_FIND
  | SDLK_g
  | SDLK_BACKQUOTE
  | SDLK_h
  | SDLK_HELP
  | SDLK_HOME
  | SDLK_i
  | SDLK_INSERT
  | SDLK_j
  | SDLK_k
  | SDLK_KBDILLUMDOWN
  | SDLK_KBDILLUMTOGGLE
  | SDLK_KBDILLUMUP
  | SDLK_KP_0
  | SDLK_KP_00
  | SDLK_KP_000
  | SDLK_KP_1
  | SDLK_KP_2
  | SDLK_KP_3
  | SDLK_KP_4
  | SDLK_KP_5
  | SDLK_KP_6
  | SDLK_KP_7
  | SDLK_KP_8
  | SDLK_KP_9
  | SDLK_KP_A
  | SDLK_KP_AMPERSAND
  | SDLK_KP_AT
  | SDLK_KP_B
  | SDLK_KP_BACKSPACE
  | SDLK_KP_BINARY
  | SDLK_KP_C
  | SDLK_KP_CLEAR
  | SDLK_KP_CLEARENTRY
  | SDLK_KP_COLON
  | SDLK_KP_COMMA
  | SDLK_KP_D
  | SDLK_KP_DBLAMPERSAND
  | SDLK_KP_DBLVERTICALBAR
  | SDLK_KP_DECIMAL
  | SDLK_KP_DIVIDE
  | SDLK_KP_E
  | SDLK_KP_ENTER
  | SDLK_KP_EQUALS
  | SDLK_KP_EQUALSAS400
  | SDLK_KP_EXCLAM
  | SDLK_KP_F
  | SDLK_KP_GREATER
  | SDLK_KP_HASH
  | SDLK_KP_HEXADECIMAL
  | SDLK_KP_LEFTBRACE
  | SDLK_KP_LEFTPAREN
  | SDLK_KP_LESS
  | SDLK_KP_MEMADD
  | SDLK_KP_MEMCLEAR
  | SDLK_KP_MEMDIVIDE
  | SDLK_KP_MEMMULTIPLY
  | SDLK_KP_MEMRECALL
  | SDLK_KP_MEMSTORE
  | SDLK_KP_MEMSUBTRACT
  | SDLK_KP_MINUS
  | SDLK_KP_MULTIPLY
  | SDLK_KP_OCTAL
  | SDLK_KP_PERCENT
  | SDLK_KP_PERIOD
  | SDLK_KP_PLUS
  | SDLK_KP_PLUSMINUS
  | SDLK_KP_POWER
  | SDLK_KP_RIGHTBRACE
  | SDLK_KP_RIGHTPAREN
  | SDLK_KP_SPACE
  | SDLK_KP_TAB
  | SDLK_KP_VERTICALBAR
  | SDLK_KP_XOR
  | SDLK_l
  | SDLK_LALT
  | SDLK_LCTRL
  | SDLK_LEFT
  | SDLK_LEFTBRACKET
  | SDLK_LGUI
  | SDLK_LSHIFT
  | SDLK_m
  | SDLK_MAIL
  | SDLK_MEDIASELECT
  | SDLK_MENU
  | SDLK_MINUS
  | SDLK_MODE
  | SDLK_MUTE
  | SDLK_n
  | SDLK_NUMLOCKCLEAR
  | SDLK_o
  | SDLK_OPER
  | SDLK_OUT
  | SDLK_p
  | SDLK_PAGEDOWN
  | SDLK_PAGEUP
  | SDLK_PASTE
  | SDLK_PAUSE
  | SDLK_PERIOD
  | SDLK_POWER
  | SDLK_PRINTSCREEN
  | SDLK_PRIOR
  | SDLK_q
  | SDLK_r
  | SDLK_RALT
  | SDLK_RCTRL
  | SDLK_RETURN
  | SDLK_RETURN2
  | SDLK_RGUI
  | SDLK_RIGHT
  | SDLK_RIGHTBRACKET
  | SDLK_RSHIFT
  | SDLK_s
  | SDLK_SCROLLLOCK
  | SDLK_SELECT
  | SDLK_SEMICOLON
  | SDLK_SEPARATOR
  | SDLK_SLASH
  | SDLK_SLEEP
  | SDLK_SPACE
  | SDLK_STOP
  | SDLK_SYSREQ
  | SDLK_t
  | SDLK_TAB
  | SDLK_THOUSANDSSEPARATOR
  | SDLK_u
  | SDLK_UNDO
  | SDLK_UP
  | SDLK_v
  | SDLK_VOLUMEDOWN
  | SDLK_VOLUMEUP
  | SDLK_w
  | SDLK_WWW
  | SDLK_x
  | SDLK_y
  | SDLK_z
  | SDLK_AMPERSAND
  | SDLK_ASTERISK
  | SDLK_AT
  | SDLK_CARET
  | SDLK_COLON
  | SDLK_DOLLAR
  | SDLK_EXCLAIM
  | SDLK_GREATER
  | SDLK_HASH
  | SDLK_LEFTPAREN
  | SDLK_LESS
  | SDLK_PERCENT
  | SDLK_PLUS
  | SDLK_QUESTION
  | SDLK_QUOTEDBL
  | SDLK_RIGHTPAREN
  | SDLK_UNDERSCORE
  | SDLK_UNKNOWN

let scan_mask = 1 lsl 30
let scancode_to_int scan = (Sdl_scancode.to_int scan) lor scan_mask
let unmask_key_to_scan c = (lnot scan_mask) land c

let to_int = function
  | SDLK_UNKNOWN -> 0
  |  SDLK_RETURN  -> int_of_char '\r'
  |  SDLK_ESCAPE  -> int_of_char '\033'
  |  SDLK_BACKSPACE  -> int_of_char '\b'
  |  SDLK_TAB  -> int_of_char '\t'
  |  SDLK_SPACE  -> int_of_char ' '
  |  SDLK_EXCLAIM  -> int_of_char '!'
  |  SDLK_QUOTEDBL  -> int_of_char '"'
  |  SDLK_HASH  -> int_of_char '#'
  |  SDLK_PERCENT  -> int_of_char '%'
  |  SDLK_DOLLAR  -> int_of_char '$'
  |  SDLK_AMPERSAND  -> int_of_char '&'
  |  SDLK_QUOTE  -> int_of_char '\''
  |  SDLK_LEFTPAREN  -> int_of_char '('
  |  SDLK_RIGHTPAREN  -> int_of_char ')'
  |  SDLK_ASTERISK  -> int_of_char '*'
  |  SDLK_PLUS  -> int_of_char '+'
  |  SDLK_COMMA  -> int_of_char ','
  |  SDLK_MINUS  -> int_of_char '-'
  |  SDLK_PERIOD  -> int_of_char '.'
  |  SDLK_SLASH  -> int_of_char '/'
  |  SDLK_0  -> int_of_char '0'
  |  SDLK_1  -> int_of_char '1'
  |  SDLK_2  -> int_of_char '2'
  |  SDLK_3  -> int_of_char '3'
  |  SDLK_4  -> int_of_char '4'
  |  SDLK_5  -> int_of_char '5'
  |  SDLK_6  -> int_of_char '6'
  |  SDLK_7  -> int_of_char '7'
  |  SDLK_8  -> int_of_char '8'
  |  SDLK_9  -> int_of_char '9'
  |  SDLK_COLON  -> int_of_char ':'
  |  SDLK_SEMICOLON  -> int_of_char ';'
  |  SDLK_LESS  -> int_of_char '<'
  |  SDLK_EQUALS -> int_of_char '='
  |  SDLK_GREATER  -> int_of_char '>'
  |  SDLK_QUESTION  -> int_of_char '?'
  |  SDLK_AT  -> int_of_char '@'
  |  SDLK_LEFTBRACKET  -> int_of_char '['
  |  SDLK_BACKSLASH  -> int_of_char '\\'
  |  SDLK_RIGHTBRACKET  -> int_of_char ']'
  |  SDLK_CARET  -> int_of_char '^'
  |  SDLK_UNDERSCORE  -> int_of_char '_'
  |  SDLK_BACKQUOTE  -> int_of_char '`'
  |  SDLK_a  -> int_of_char 'a'
  |  SDLK_b  -> int_of_char 'b'
  |  SDLK_c  -> int_of_char 'c'
  |  SDLK_d  -> int_of_char 'd'
  |  SDLK_e  -> int_of_char 'e'
  |  SDLK_f  -> int_of_char 'f'
  |  SDLK_g  -> int_of_char 'g'
  |  SDLK_h  -> int_of_char 'h'
  |  SDLK_i  -> int_of_char 'i'
  |  SDLK_j  -> int_of_char 'j'
  |  SDLK_k  -> int_of_char 'k'
  |  SDLK_l  -> int_of_char 'l'
  |  SDLK_m  -> int_of_char 'm'
  |  SDLK_n  -> int_of_char 'n'
  |  SDLK_o  -> int_of_char 'o'
  |  SDLK_p  -> int_of_char 'p'
  |  SDLK_q  -> int_of_char 'q'
  |  SDLK_r  -> int_of_char 'r'
  |  SDLK_s  -> int_of_char 's'
  |  SDLK_t  -> int_of_char 't'
  |  SDLK_u  -> int_of_char 'u'
  |  SDLK_v  -> int_of_char 'v'
  |  SDLK_w  -> int_of_char 'w'
  |  SDLK_x  -> int_of_char 'x'
  |  SDLK_y  -> int_of_char 'y'
  |  SDLK_z  -> int_of_char 'z'
  | SDLK_DELETE -> int_of_char '\177'
  |     SDLK_CAPSLOCK  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CAPSLOCK
  |     SDLK_F1  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F1
  |     SDLK_F2  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F2
  |     SDLK_F3  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F3
  |     SDLK_F4  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F4
  |     SDLK_F5  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F5
  |     SDLK_F6  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F6
  |     SDLK_F7  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F7
  |     SDLK_F8  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F8
  |     SDLK_F9  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F9
  |     SDLK_F10  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F10
  |     SDLK_F11  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F11
  |     SDLK_F12  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F12
  |     SDLK_PRINTSCREEN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_PRINTSCREEN
  |     SDLK_SCROLLLOCK  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_SCROLLLOCK
  |     SDLK_PAUSE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_PAUSE
  |     SDLK_INSERT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_INSERT
  |     SDLK_HOME  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_HOME
  |     SDLK_PAGEUP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_PAGEUP
  |     SDLK_END  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_END
  |     SDLK_PAGEDOWN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_PAGEDOWN
  |     SDLK_RIGHT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_RIGHT
  |     SDLK_LEFT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_LEFT
  |     SDLK_DOWN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_DOWN
  |     SDLK_UP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_UP
  |     SDLK_NUMLOCKCLEAR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_NUMLOCKCLEAR
  |     SDLK_KP_DIVIDE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_DIVIDE
  |     SDLK_KP_MULTIPLY  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MULTIPLY
  |     SDLK_KP_MINUS  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MINUS
  |     SDLK_KP_PLUS  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_PLUS
  |     SDLK_KP_ENTER  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_ENTER
  |     SDLK_KP_1  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_1
  |     SDLK_KP_2  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_2
  |     SDLK_KP_3  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_3
  |     SDLK_KP_4  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_4
  |     SDLK_KP_5  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_5
  |     SDLK_KP_6  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_6
  |     SDLK_KP_7  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_7
  |     SDLK_KP_8  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_8
  |     SDLK_KP_9  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_9
  |     SDLK_KP_0  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_0
  |     SDLK_KP_PERIOD  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_PERIOD
  |     SDLK_APPLICATION  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_APPLICATION
  |     SDLK_POWER  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_POWER
  |     SDLK_KP_EQUALS  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_EQUALS
  |     SDLK_F13  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F13
  |     SDLK_F14  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F14
  |     SDLK_F15  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F15
  |     SDLK_F16  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F16
  |     SDLK_F17  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F17
  |     SDLK_F18  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F18
  |     SDLK_F19  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F19
  |     SDLK_F20  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F20
  |     SDLK_F21  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F21
  |     SDLK_F22  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F22
  |     SDLK_F23  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F23
  |     SDLK_F24  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_F24
  |     SDLK_EXECUTE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_EXECUTE
  |     SDLK_HELP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_HELP
  |     SDLK_MENU  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_MENU
  |     SDLK_SELECT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_SELECT
  |     SDLK_STOP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_STOP
  |     SDLK_AGAIN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AGAIN
  |     SDLK_UNDO  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_UNDO
  |     SDLK_CUT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CUT
  |     SDLK_COPY  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_COPY
  |     SDLK_PASTE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_PASTE
  |     SDLK_FIND  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_FIND
  |     SDLK_MUTE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_MUTE
  |     SDLK_VOLUMEUP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_VOLUMEUP
  |     SDLK_VOLUMEDOWN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_VOLUMEDOWN
  |     SDLK_KP_COMMA  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_COMMA
  |     SDLK_KP_EQUALSAS400  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_EQUALSAS400
  |     SDLK_ALTERASE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_ALTERASE
  |     SDLK_SYSREQ  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_SYSREQ
  |     SDLK_CANCEL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CANCEL
  |     SDLK_CLEAR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CLEAR
  |     SDLK_PRIOR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_PRIOR
  |     SDLK_RETURN2  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_RETURN2
  |     SDLK_SEPARATOR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_SEPARATOR
  |     SDLK_OUT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_OUT
  |     SDLK_OPER  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_OPER
  |     SDLK_CLEARAGAIN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CLEARAGAIN
  |     SDLK_CRSEL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CRSEL
  |     SDLK_EXSEL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_EXSEL
  |     SDLK_KP_00  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_00
  |     SDLK_KP_000  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_000
  |     SDLK_THOUSANDSSEPARATOR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_THOUSANDSSEPARATOR
  |     SDLK_DECIMALSEPARATOR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_DECIMALSEPARATOR
  |     SDLK_CURRENCYUNIT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CURRENCYUNIT
  |     SDLK_CURRENCYSUBUNIT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CURRENCYSUBUNIT
  |     SDLK_KP_LEFTPAREN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_LEFTPAREN
  |     SDLK_KP_RIGHTPAREN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_RIGHTPAREN
  |     SDLK_KP_LEFTBRACE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_LEFTBRACE
  |     SDLK_KP_RIGHTBRACE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_RIGHTBRACE
  |     SDLK_KP_TAB  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_TAB
  |     SDLK_KP_BACKSPACE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_BACKSPACE
  |     SDLK_KP_A  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_A
  |     SDLK_KP_B  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_B
  |     SDLK_KP_C  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_C
  |     SDLK_KP_D  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_D
  |     SDLK_KP_E  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_E
  |     SDLK_KP_F  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_F
  |     SDLK_KP_XOR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_XOR
  |     SDLK_KP_POWER  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_POWER
  |     SDLK_KP_PERCENT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_PERCENT
  |     SDLK_KP_LESS  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_LESS
  |     SDLK_KP_GREATER  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_GREATER
  |     SDLK_KP_AMPERSAND  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_AMPERSAND
  |     SDLK_KP_DBLAMPERSAND  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_DBLAMPERSAND
  |     SDLK_KP_VERTICALBAR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_VERTICALBAR
  |     SDLK_KP_DBLVERTICALBAR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_DBLVERTICALBAR
  |     SDLK_KP_COLON  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_COLON
  |     SDLK_KP_HASH  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_HASH
  |     SDLK_KP_SPACE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_SPACE
  |     SDLK_KP_AT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_AT
  |     SDLK_KP_EXCLAM  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_EXCLAM
  |     SDLK_KP_MEMSTORE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MEMSTORE
  |     SDLK_KP_MEMRECALL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MEMRECALL
  |     SDLK_KP_MEMCLEAR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MEMCLEAR
  |     SDLK_KP_MEMADD  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MEMADD
  |     SDLK_KP_MEMSUBTRACT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MEMSUBTRACT
  |     SDLK_KP_MEMMULTIPLY  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MEMMULTIPLY
  |     SDLK_KP_MEMDIVIDE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_MEMDIVIDE
  |     SDLK_KP_PLUSMINUS  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_PLUSMINUS
  |     SDLK_KP_CLEAR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_CLEAR
  |     SDLK_KP_CLEARENTRY  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_CLEARENTRY
  |     SDLK_KP_BINARY  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_BINARY
  |     SDLK_KP_OCTAL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_OCTAL
  |     SDLK_KP_DECIMAL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_DECIMAL
  |     SDLK_KP_HEXADECIMAL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KP_HEXADECIMAL
  |     SDLK_LCTRL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_LCTRL
  |     SDLK_LSHIFT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_LSHIFT
  |     SDLK_LALT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_LALT
  |     SDLK_LGUI  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_LGUI
  |     SDLK_RCTRL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_RCTRL
  |     SDLK_RSHIFT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_RSHIFT
  |     SDLK_RALT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_RALT
  |     SDLK_RGUI  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_RGUI
  |     SDLK_MODE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_MODE
  |     SDLK_AUDIONEXT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AUDIONEXT
  |     SDLK_AUDIOPREV  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AUDIOPREV
  |     SDLK_AUDIOSTOP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AUDIOSTOP
  |     SDLK_AUDIOPLAY  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AUDIOPLAY
  |     SDLK_AUDIOMUTE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AUDIOMUTE
  |     SDLK_MEDIASELECT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_MEDIASELECT
  |     SDLK_WWW  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_WWW
  |     SDLK_MAIL  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_MAIL
  |     SDLK_CALCULATOR  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_CALCULATOR
  |     SDLK_COMPUTER  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_COMPUTER
  |     SDLK_AC_SEARCH  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AC_SEARCH
  |     SDLK_AC_HOME  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AC_HOME
  |     SDLK_AC_BACK  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AC_BACK
  |     SDLK_AC_FORWARD  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AC_FORWARD
  |     SDLK_AC_STOP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AC_STOP
  |     SDLK_AC_REFRESH  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AC_REFRESH
  |     SDLK_AC_BOOKMARKS  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_AC_BOOKMARKS
  |     SDLK_BRIGHTNESSDOWN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_BRIGHTNESSDOWN
  |     SDLK_BRIGHTNESSUP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_BRIGHTNESSUP
  |     SDLK_DISPLAYSWITCH  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_DISPLAYSWITCH
  |     SDLK_KBDILLUMTOGGLE  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KBDILLUMTOGGLE
  |     SDLK_KBDILLUMDOWN  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KBDILLUMDOWN
  |     SDLK_KBDILLUMUP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_KBDILLUMUP
  |     SDLK_EJECT  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_EJECT
  |     SDLK_SLEEP  -> scancode_to_int Sdl_scancode.SDL_SCANCODE_SLEEP

let scan_to_key = function
  | Sdl_scancode.SDL_SCANCODE_CAPSLOCK -> SDLK_CAPSLOCK
  | Sdl_scancode.SDL_SCANCODE_F1 -> SDLK_F1
  | Sdl_scancode.SDL_SCANCODE_F2 -> SDLK_F2
  | Sdl_scancode.SDL_SCANCODE_F3 -> SDLK_F3
  | Sdl_scancode.SDL_SCANCODE_F4 -> SDLK_F4
  | Sdl_scancode.SDL_SCANCODE_F5 -> SDLK_F5
  | Sdl_scancode.SDL_SCANCODE_F6 -> SDLK_F6
  | Sdl_scancode.SDL_SCANCODE_F7 -> SDLK_F7
  | Sdl_scancode.SDL_SCANCODE_F8 -> SDLK_F8
  | Sdl_scancode.SDL_SCANCODE_F9 -> SDLK_F9
  | Sdl_scancode.SDL_SCANCODE_F10 -> SDLK_F10
  | Sdl_scancode.SDL_SCANCODE_F11 -> SDLK_F11
  | Sdl_scancode.SDL_SCANCODE_F12 -> SDLK_F12
  | Sdl_scancode.SDL_SCANCODE_PRINTSCREEN -> SDLK_PRINTSCREEN
  | Sdl_scancode.SDL_SCANCODE_SCROLLLOCK -> SDLK_SCROLLLOCK
  | Sdl_scancode.SDL_SCANCODE_PAUSE -> SDLK_PAUSE
  | Sdl_scancode.SDL_SCANCODE_INSERT -> SDLK_INSERT
  | Sdl_scancode.SDL_SCANCODE_HOME -> SDLK_HOME
  | Sdl_scancode.SDL_SCANCODE_PAGEUP -> SDLK_PAGEUP
  | Sdl_scancode.SDL_SCANCODE_END -> SDLK_END
  | Sdl_scancode.SDL_SCANCODE_PAGEDOWN -> SDLK_PAGEDOWN
  | Sdl_scancode.SDL_SCANCODE_RIGHT -> SDLK_RIGHT
  | Sdl_scancode.SDL_SCANCODE_LEFT -> SDLK_LEFT
  | Sdl_scancode.SDL_SCANCODE_DOWN -> SDLK_DOWN
  | Sdl_scancode.SDL_SCANCODE_UP -> SDLK_UP
  | Sdl_scancode.SDL_SCANCODE_NUMLOCKCLEAR -> SDLK_NUMLOCKCLEAR
  | Sdl_scancode.SDL_SCANCODE_KP_DIVIDE -> SDLK_KP_DIVIDE
  | Sdl_scancode.SDL_SCANCODE_KP_MULTIPLY -> SDLK_KP_MULTIPLY
  | Sdl_scancode.SDL_SCANCODE_KP_MINUS -> SDLK_KP_MINUS
  | Sdl_scancode.SDL_SCANCODE_KP_PLUS -> SDLK_KP_PLUS
  | Sdl_scancode.SDL_SCANCODE_KP_ENTER -> SDLK_KP_ENTER
  | Sdl_scancode.SDL_SCANCODE_KP_1 -> SDLK_KP_1
  | Sdl_scancode.SDL_SCANCODE_KP_2 -> SDLK_KP_2
  | Sdl_scancode.SDL_SCANCODE_KP_3 -> SDLK_KP_3
  | Sdl_scancode.SDL_SCANCODE_KP_4 -> SDLK_KP_4
  | Sdl_scancode.SDL_SCANCODE_KP_5 -> SDLK_KP_5
  | Sdl_scancode.SDL_SCANCODE_KP_6 -> SDLK_KP_6
  | Sdl_scancode.SDL_SCANCODE_KP_7 -> SDLK_KP_7
  | Sdl_scancode.SDL_SCANCODE_KP_8 -> SDLK_KP_8
  | Sdl_scancode.SDL_SCANCODE_KP_9 -> SDLK_KP_9
  | Sdl_scancode.SDL_SCANCODE_KP_0 -> SDLK_KP_0
  | Sdl_scancode.SDL_SCANCODE_KP_PERIOD -> SDLK_KP_PERIOD
  | Sdl_scancode.SDL_SCANCODE_APPLICATION -> SDLK_APPLICATION
  | Sdl_scancode.SDL_SCANCODE_POWER -> SDLK_POWER
  | Sdl_scancode.SDL_SCANCODE_KP_EQUALS -> SDLK_KP_EQUALS
  | Sdl_scancode.SDL_SCANCODE_F13 -> SDLK_F13
  | Sdl_scancode.SDL_SCANCODE_F14 -> SDLK_F14
  | Sdl_scancode.SDL_SCANCODE_F15 -> SDLK_F15
  | Sdl_scancode.SDL_SCANCODE_F16 -> SDLK_F16
  | Sdl_scancode.SDL_SCANCODE_F17 -> SDLK_F17
  | Sdl_scancode.SDL_SCANCODE_F18 -> SDLK_F18
  | Sdl_scancode.SDL_SCANCODE_F19 -> SDLK_F19
  | Sdl_scancode.SDL_SCANCODE_F20 -> SDLK_F20
  | Sdl_scancode.SDL_SCANCODE_F21 -> SDLK_F21
  | Sdl_scancode.SDL_SCANCODE_F22 -> SDLK_F22
  | Sdl_scancode.SDL_SCANCODE_F23 -> SDLK_F23
  | Sdl_scancode.SDL_SCANCODE_F24 -> SDLK_F24
  | Sdl_scancode.SDL_SCANCODE_EXECUTE -> SDLK_EXECUTE
  | Sdl_scancode.SDL_SCANCODE_HELP -> SDLK_HELP
  | Sdl_scancode.SDL_SCANCODE_MENU -> SDLK_MENU
  | Sdl_scancode.SDL_SCANCODE_SELECT -> SDLK_SELECT
  | Sdl_scancode.SDL_SCANCODE_STOP -> SDLK_STOP
  | Sdl_scancode.SDL_SCANCODE_AGAIN -> SDLK_AGAIN
  | Sdl_scancode.SDL_SCANCODE_UNDO -> SDLK_UNDO
  | Sdl_scancode.SDL_SCANCODE_CUT -> SDLK_CUT
  | Sdl_scancode.SDL_SCANCODE_COPY -> SDLK_COPY
  | Sdl_scancode.SDL_SCANCODE_PASTE -> SDLK_PASTE
  | Sdl_scancode.SDL_SCANCODE_FIND -> SDLK_FIND
  | Sdl_scancode.SDL_SCANCODE_MUTE -> SDLK_MUTE
  | Sdl_scancode.SDL_SCANCODE_VOLUMEUP -> SDLK_VOLUMEUP
  | Sdl_scancode.SDL_SCANCODE_VOLUMEDOWN -> SDLK_VOLUMEDOWN
  | Sdl_scancode.SDL_SCANCODE_KP_COMMA -> SDLK_KP_COMMA
  | Sdl_scancode.SDL_SCANCODE_KP_EQUALSAS400 -> SDLK_KP_EQUALSAS400
  | Sdl_scancode.SDL_SCANCODE_ALTERASE -> SDLK_ALTERASE
  | Sdl_scancode.SDL_SCANCODE_SYSREQ -> SDLK_SYSREQ
  | Sdl_scancode.SDL_SCANCODE_CANCEL -> SDLK_CANCEL
  | Sdl_scancode.SDL_SCANCODE_CLEAR -> SDLK_CLEAR
  | Sdl_scancode.SDL_SCANCODE_PRIOR -> SDLK_PRIOR
  | Sdl_scancode.SDL_SCANCODE_RETURN2 -> SDLK_RETURN2
  | Sdl_scancode.SDL_SCANCODE_SEPARATOR -> SDLK_SEPARATOR
  | Sdl_scancode.SDL_SCANCODE_OUT -> SDLK_OUT
  | Sdl_scancode.SDL_SCANCODE_OPER -> SDLK_OPER
  | Sdl_scancode.SDL_SCANCODE_CLEARAGAIN -> SDLK_CLEARAGAIN
  | Sdl_scancode.SDL_SCANCODE_CRSEL -> SDLK_CRSEL
  | Sdl_scancode.SDL_SCANCODE_EXSEL -> SDLK_EXSEL
  | Sdl_scancode.SDL_SCANCODE_KP_00 -> SDLK_KP_00
  | Sdl_scancode.SDL_SCANCODE_KP_000 -> SDLK_KP_000
  | Sdl_scancode.SDL_SCANCODE_THOUSANDSSEPARATOR -> SDLK_THOUSANDSSEPARATOR
  | Sdl_scancode.SDL_SCANCODE_DECIMALSEPARATOR -> SDLK_DECIMALSEPARATOR
  | Sdl_scancode.SDL_SCANCODE_CURRENCYUNIT -> SDLK_CURRENCYUNIT
  | Sdl_scancode.SDL_SCANCODE_CURRENCYSUBUNIT -> SDLK_CURRENCYSUBUNIT
  | Sdl_scancode.SDL_SCANCODE_KP_LEFTPAREN -> SDLK_KP_LEFTPAREN
  | Sdl_scancode.SDL_SCANCODE_KP_RIGHTPAREN -> SDLK_KP_RIGHTPAREN
  | Sdl_scancode.SDL_SCANCODE_KP_LEFTBRACE -> SDLK_KP_LEFTBRACE
  | Sdl_scancode.SDL_SCANCODE_KP_RIGHTBRACE -> SDLK_KP_RIGHTBRACE
  | Sdl_scancode.SDL_SCANCODE_KP_TAB -> SDLK_KP_TAB
  | Sdl_scancode.SDL_SCANCODE_KP_BACKSPACE -> SDLK_KP_BACKSPACE
  | Sdl_scancode.SDL_SCANCODE_KP_A -> SDLK_KP_A
  | Sdl_scancode.SDL_SCANCODE_KP_B -> SDLK_KP_B
  | Sdl_scancode.SDL_SCANCODE_KP_C -> SDLK_KP_C
  | Sdl_scancode.SDL_SCANCODE_KP_D -> SDLK_KP_D
  | Sdl_scancode.SDL_SCANCODE_KP_E -> SDLK_KP_E
  | Sdl_scancode.SDL_SCANCODE_KP_F -> SDLK_KP_F
  | Sdl_scancode.SDL_SCANCODE_KP_XOR -> SDLK_KP_XOR
  | Sdl_scancode.SDL_SCANCODE_KP_POWER -> SDLK_KP_POWER
  | Sdl_scancode.SDL_SCANCODE_KP_PERCENT -> SDLK_KP_PERCENT
  | Sdl_scancode.SDL_SCANCODE_KP_LESS -> SDLK_KP_LESS
  | Sdl_scancode.SDL_SCANCODE_KP_GREATER -> SDLK_KP_GREATER
  | Sdl_scancode.SDL_SCANCODE_KP_AMPERSAND -> SDLK_KP_AMPERSAND
  | Sdl_scancode.SDL_SCANCODE_KP_DBLAMPERSAND -> SDLK_KP_DBLAMPERSAND
  | Sdl_scancode.SDL_SCANCODE_KP_VERTICALBAR -> SDLK_KP_VERTICALBAR
  | Sdl_scancode.SDL_SCANCODE_KP_DBLVERTICALBAR -> SDLK_KP_DBLVERTICALBAR
  | Sdl_scancode.SDL_SCANCODE_KP_COLON -> SDLK_KP_COLON
  | Sdl_scancode.SDL_SCANCODE_KP_HASH -> SDLK_KP_HASH
  | Sdl_scancode.SDL_SCANCODE_KP_SPACE -> SDLK_KP_SPACE
  | Sdl_scancode.SDL_SCANCODE_KP_AT -> SDLK_KP_AT
  | Sdl_scancode.SDL_SCANCODE_KP_EXCLAM -> SDLK_KP_EXCLAM
  | Sdl_scancode.SDL_SCANCODE_KP_MEMSTORE -> SDLK_KP_MEMSTORE
  | Sdl_scancode.SDL_SCANCODE_KP_MEMRECALL -> SDLK_KP_MEMRECALL
  | Sdl_scancode.SDL_SCANCODE_KP_MEMCLEAR -> SDLK_KP_MEMCLEAR
  | Sdl_scancode.SDL_SCANCODE_KP_MEMADD -> SDLK_KP_MEMADD
  | Sdl_scancode.SDL_SCANCODE_KP_MEMSUBTRACT -> SDLK_KP_MEMSUBTRACT
  | Sdl_scancode.SDL_SCANCODE_KP_MEMMULTIPLY -> SDLK_KP_MEMMULTIPLY
  | Sdl_scancode.SDL_SCANCODE_KP_MEMDIVIDE -> SDLK_KP_MEMDIVIDE
  | Sdl_scancode.SDL_SCANCODE_KP_PLUSMINUS -> SDLK_KP_PLUSMINUS
  | Sdl_scancode.SDL_SCANCODE_KP_CLEAR -> SDLK_KP_CLEAR
  | Sdl_scancode.SDL_SCANCODE_KP_CLEARENTRY -> SDLK_KP_CLEARENTRY
  | Sdl_scancode.SDL_SCANCODE_KP_BINARY -> SDLK_KP_BINARY
  | Sdl_scancode.SDL_SCANCODE_KP_OCTAL -> SDLK_KP_OCTAL
  | Sdl_scancode.SDL_SCANCODE_KP_DECIMAL -> SDLK_KP_DECIMAL
  | Sdl_scancode.SDL_SCANCODE_KP_HEXADECIMAL -> SDLK_KP_HEXADECIMAL
  | Sdl_scancode.SDL_SCANCODE_LCTRL -> SDLK_LCTRL
  | Sdl_scancode.SDL_SCANCODE_LSHIFT -> SDLK_LSHIFT
  | Sdl_scancode.SDL_SCANCODE_LALT -> SDLK_LALT
  | Sdl_scancode.SDL_SCANCODE_LGUI -> SDLK_LGUI
  | Sdl_scancode.SDL_SCANCODE_RCTRL -> SDLK_RCTRL
  | Sdl_scancode.SDL_SCANCODE_RSHIFT -> SDLK_RSHIFT
  | Sdl_scancode.SDL_SCANCODE_RALT -> SDLK_RALT
  | Sdl_scancode.SDL_SCANCODE_RGUI -> SDLK_RGUI
  | Sdl_scancode.SDL_SCANCODE_MODE -> SDLK_MODE
  | Sdl_scancode.SDL_SCANCODE_AUDIONEXT -> SDLK_AUDIONEXT
  | Sdl_scancode.SDL_SCANCODE_AUDIOPREV -> SDLK_AUDIOPREV
  | Sdl_scancode.SDL_SCANCODE_AUDIOSTOP -> SDLK_AUDIOSTOP
  | Sdl_scancode.SDL_SCANCODE_AUDIOPLAY -> SDLK_AUDIOPLAY
  | Sdl_scancode.SDL_SCANCODE_AUDIOMUTE -> SDLK_AUDIOMUTE
  | Sdl_scancode.SDL_SCANCODE_MEDIASELECT -> SDLK_MEDIASELECT
  | Sdl_scancode.SDL_SCANCODE_WWW -> SDLK_WWW
  | Sdl_scancode.SDL_SCANCODE_MAIL -> SDLK_MAIL
  | Sdl_scancode.SDL_SCANCODE_CALCULATOR -> SDLK_CALCULATOR
  | Sdl_scancode.SDL_SCANCODE_COMPUTER -> SDLK_COMPUTER
  | Sdl_scancode.SDL_SCANCODE_AC_SEARCH -> SDLK_AC_SEARCH
  | Sdl_scancode.SDL_SCANCODE_AC_HOME -> SDLK_AC_HOME
  | Sdl_scancode.SDL_SCANCODE_AC_BACK -> SDLK_AC_BACK
  | Sdl_scancode.SDL_SCANCODE_AC_FORWARD -> SDLK_AC_FORWARD
  | Sdl_scancode.SDL_SCANCODE_AC_STOP -> SDLK_AC_STOP
  | Sdl_scancode.SDL_SCANCODE_AC_REFRESH -> SDLK_AC_REFRESH
  | Sdl_scancode.SDL_SCANCODE_AC_BOOKMARKS -> SDLK_AC_BOOKMARKS
  | Sdl_scancode.SDL_SCANCODE_BRIGHTNESSDOWN -> SDLK_BRIGHTNESSDOWN
  | Sdl_scancode.SDL_SCANCODE_BRIGHTNESSUP -> SDLK_BRIGHTNESSUP
  | Sdl_scancode.SDL_SCANCODE_DISPLAYSWITCH -> SDLK_DISPLAYSWITCH
  | Sdl_scancode.SDL_SCANCODE_KBDILLUMTOGGLE -> SDLK_KBDILLUMTOGGLE
  | Sdl_scancode.SDL_SCANCODE_KBDILLUMDOWN -> SDLK_KBDILLUMDOWN
  | Sdl_scancode.SDL_SCANCODE_KBDILLUMUP -> SDLK_KBDILLUMUP
  | Sdl_scancode.SDL_SCANCODE_EJECT -> SDLK_EJECT
  | Sdl_scancode.SDL_SCANCODE_SLEEP -> SDLK_SLEEP
  | _ -> SDLK_UNKNOWN

let of_int c =
  match char_of_int c with
  | '\r' -> SDLK_RETURN
  | '\027' -> SDLK_ESCAPE
  | '\b' -> SDLK_BACKSPACE
  | '\t' -> SDLK_TAB
  | ' ' -> SDLK_SPACE
  | '!' -> SDLK_EXCLAIM
  | '"' -> SDLK_QUOTEDBL
  | '#' -> SDLK_HASH
  | '%' -> SDLK_PERCENT
  | '$' -> SDLK_DOLLAR
  | '&' -> SDLK_AMPERSAND
  | '\'' -> SDLK_QUOTE
  | '(' -> SDLK_LEFTPAREN
  | ')' -> SDLK_RIGHTPAREN
  | '*' -> SDLK_ASTERISK
  | '+' -> SDLK_PLUS
  | ',' -> SDLK_COMMA
  | '-' -> SDLK_MINUS
  | '.' -> SDLK_PERIOD
  | '/' -> SDLK_SLASH
  | '0' -> SDLK_0
  | '1' -> SDLK_1
  | '2' -> SDLK_2
  | '3' -> SDLK_3
  | '4' -> SDLK_4
  | '5' -> SDLK_5
  | '6' -> SDLK_6
  | '7' -> SDLK_7
  | '8' -> SDLK_8
  | '9' -> SDLK_9
  | ':' -> SDLK_COLON
  | ';' -> SDLK_SEMICOLON
  | '<' -> SDLK_LESS
  | '=' -> SDLK_EQUALS
  | '>' -> SDLK_GREATER
  | '?' -> SDLK_QUESTION
  | '@' -> SDLK_AT
  | '[' -> SDLK_LEFTBRACKET
  | '\\' -> SDLK_BACKSLASH
  | ']' -> SDLK_RIGHTBRACKET
  | '^' -> SDLK_CARET
  | '_' -> SDLK_UNDERSCORE
  | '`' -> SDLK_BACKQUOTE
  | 'a' -> SDLK_a
  | 'b' -> SDLK_b
  | 'c' -> SDLK_c
  | 'd' -> SDLK_d
  | 'e' -> SDLK_e
  | 'f' -> SDLK_f
  | 'g' -> SDLK_g
  | 'h' -> SDLK_h
  | 'i' -> SDLK_i
  | 'j' -> SDLK_j
  | 'k' -> SDLK_k
  | 'l' -> SDLK_l
  | 'm' -> SDLK_m
  | 'n' -> SDLK_n
  | 'o' -> SDLK_o
  | 'p' -> SDLK_p
  | 'q' -> SDLK_q
  | 'r' -> SDLK_r
  | 's' -> SDLK_s
  | 't' -> SDLK_t
  | 'u' -> SDLK_u
  | 'v' -> SDLK_v
  | 'w' -> SDLK_w
  | 'x' -> SDLK_x
  | 'y' -> SDLK_y
  | 'z' -> SDLK_z
  | '\177' -> SDLK_DELETE
  | _ -> let code = unmask_key_to_scan c in
    scan_to_key (Sdl_scancode.of_int code)
end
module Sdl_keymod = struct
type t =
    KMOD_GUI
  | KMOD_ALT
  | KMOD_SHIFT
  | KMOD_CTRL
  | KMOD_MODE
  | KMOD_CAPS
  | KMOD_NUM
  | KMOD_RGUI
  | KMOD_LGUI
  | KMOD_RALT
  | KMOD_LALT
  | KMOD_RCTRL
  | KMOD_LCTRL
  | KMOD_RSHIFT
  | KMOD_LSHIFT
  | KMOD_NONE

let to_int = function
  | KMOD_NONE   -> 0x0000
  | KMOD_LSHIFT -> 0x0001
  | KMOD_RSHIFT -> 0x0002
  | KMOD_LCTRL  -> 0x0040
  | KMOD_RCTRL  -> 0x0080
  | KMOD_LALT   -> 0x0100
  | KMOD_RALT   -> 0x0200
  | KMOD_LGUI   -> 0x0400
  | KMOD_RGUI   -> 0x0800
  | KMOD_NUM    -> 0x1000
  | KMOD_CAPS   -> 0x2000
  | KMOD_MODE   -> 0x4000
  | KMOD_GUI    -> 0x0400 lor 0x0800
  | KMOD_ALT    -> 0x0100 lor 0x0200
  | KMOD_SHIFT  -> 0x0001 lor 0x0002
  | KMOD_CTRL   -> 0x0040 lor 0x0080

let of_int = function
  | 0x0000 -> KMOD_NONE
  | m when m land 0x0001 = 0x0001 -> KMOD_LSHIFT
  | m when m land 0x0002 = 0x0002 -> KMOD_RSHIFT
  | m when m land 0x0040 = 0x0040 -> KMOD_LCTRL
  | m when m land 0x0080 = 0x0080 -> KMOD_RCTRL
  | m when m land 0x0100 = 0x0100 -> KMOD_LALT
  | m when m land 0x0200 = 0x0200 -> KMOD_RALT
  | m when m land 0x0400 = 0x0400 -> KMOD_LGUI
  | m when m land 0x0800 = 0x0800 -> KMOD_RGUI
  | m when m land 0x1000 = 0x1000 -> KMOD_NUM
  | m when m land 0x2000 = 0x2000 -> KMOD_CAPS
  | m when m land 0x4000 = 0x4000 -> KMOD_MODE
  | m when m land 0x0C00 = 0x0C00 -> KMOD_GUI
  | m when m land 0x0300 = 0x0300 -> KMOD_ALT
  | m when m land 0x0003 = 0x0003 -> KMOD_SHIFT
  | m when m land 0x00C0 = 0x00C0 -> KMOD_CTRL
  | _ -> failwith "Give invalid value to match any variant"

let to_list m =
  let rec to_list_rec m l =
    match of_int m with
    | KMOD_NONE -> KMOD_NONE :: l
    | f -> to_list_rec (m lsr 1) (f :: l)
  in
  to_list_rec m []
end
module Sdl_log_category = struct
type t =
  [`INPUT
  | `ASSERT
  |`RENDER
  |`VIDEO
  |`AUDIO
  |`SYSTEM
  |`ERROR
  |`APPLICATION
  ]

let to_int = function
  | `INPUT -> 7
  | `RENDER -> 6
  | `VIDEO -> 5
  | `AUDIO -> 4
  | `SYSTEM -> 3
  | `ASSERT -> 2
  | `ERROR -> 1
  | `APPLICATION -> 0

let of_int = function
  | 7 -> `INPUT
  | 6 -> `RENDER
  | 5 -> `VIDEO
  | 4 -> `AUDIO
  | 3 -> `SYSTEM
  | 2 -> `ASSERT
  | 1 -> `ERROR
  | 0 -> `APPLICATION
  | _ -> failwith "No variant to match given value"
end
module Sdl_log_priority = struct
type t = [`CRITICAL
         |`ERROR
         |`WARN
         |`INFO
         |`DEBUG
         |`VERBOSE
         ]

let to_int = function
  | `CRITICAL -> 6
  | `ERROR -> 5
  | `WARN -> 4
  | `INFO -> 3
  | `DEBUG -> 2
  | `VERBOSE -> 1

let of_int = function
  | 6 -> `CRITICAL
  | 5 -> `ERROR
  | 4 -> `WARN
  | 3 -> `INFO
  | 2 -> `DEBUG
  | 1 -> `VERBOSE
  | _ -> failwith "No variant to match given value"
end
module Sdl_messagebox_flags = struct
type t =
    SDL_MESSAGEBOX_INFORMATION
  | SDL_MESSAGEBOX_WARNING
  | SDL_MESSAGEBOX_ERROR

end
module Sdl_mousebutton = struct
type t =
    SDL_BUTTON_X2
  | SDL_BUTTON_X1
  | SDL_BUTTON_R
  | SDL_BUTTON_M
  | SDL_BUTTON_L

let button x = 1 lsl (x - 1)

let button_map = [
  (SDL_BUTTON_X2, button 5);
  (SDL_BUTTON_X1, button 4);
  (SDL_BUTTON_R, button 3);
  (SDL_BUTTON_M, button 2);
  (SDL_BUTTON_L, button 1);
]

let to_int = function
  | SDL_BUTTON_X2 -> button 5
  | SDL_BUTTON_X1 -> button 4
  | SDL_BUTTON_R -> button 3
  | SDL_BUTTON_M -> button 2
  | SDL_BUTTON_L -> button 1

let of_int v = List.find (fun x -> (snd x) = v) button_map |> fst

let of_int_list v = List.filter (fun x -> (snd x) land v > 0) button_map |>
                    List.map fst

let to_combined_int values = List.map to_int values |> List.fold_left (fun s v -> s lor v) 0
end
module Sdl_mousewheel = struct
type t =
    SDL_MOUSEWHEEL_NORMAL
  | SDL_MOUSEWHEEL_FLIPPED

let of_int = function
  | 0 -> SDL_MOUSEWHEEL_NORMAL
  | 1 -> SDL_MOUSEWHEEL_FLIPPED
  | _ -> failwith "No variant match given value"

let to_int = function
  | SDL_MOUSEWHEEL_FLIPPED -> 1
  | SDL_MOUSEWHEEL_NORMAL -> 0
end
module Sdl_pixel_format_enum = struct
module Pixel_type = struct
  type t = SDL_PIXELTYPE_UNKNOWN
         | SDL_PIXELTYPE_INDEX1
         | SDL_PIXELTYPE_INDEX4
         | SDL_PIXELTYPE_INDEX8
         | SDL_PIXELTYPE_PACKED8
         | SDL_PIXELTYPE_PACKED16
         | SDL_PIXELTYPE_PACKED32
         | SDL_PIXELTYPE_ARRAYU8
         | SDL_PIXELTYPE_ARRAYU16
         | SDL_PIXELTYPE_ARRAYU32
         | SDL_PIXELTYPE_ARRAYF16
         | SDL_PIXELTYPE_ARRAYF32

  let to_int = function
    | SDL_PIXELTYPE_UNKNOWN -> 0l
    | SDL_PIXELTYPE_INDEX1 -> 1l
    | SDL_PIXELTYPE_INDEX4 -> 2l
    | SDL_PIXELTYPE_INDEX8 -> 3l
    | SDL_PIXELTYPE_PACKED8 -> 4l
    | SDL_PIXELTYPE_PACKED16 -> 5l
    | SDL_PIXELTYPE_PACKED32 -> 6l
    | SDL_PIXELTYPE_ARRAYU8 -> 7l
    | SDL_PIXELTYPE_ARRAYU16 -> 8l
    | SDL_PIXELTYPE_ARRAYU32 -> 9l
    | SDL_PIXELTYPE_ARRAYF16 -> 10l
    | SDL_PIXELTYPE_ARRAYF32 -> 11l
end

module Packed_order = struct
  type t = SDL_PACKEDORDER_NONE
         | SDL_PACKEDORDER_XRGB
         | SDL_PACKEDORDER_RGBX
         | SDL_PACKEDORDER_ARGB
         | SDL_PACKEDORDER_RGBA
         | SDL_PACKEDORDER_XBGR
         | SDL_PACKEDORDER_BGRX
         | SDL_PACKEDORDER_ABGR
         | SDL_PACKEDORDER_BGRA
         | SDL_BITMAPORDER_NONE
         | SDL_BITMAPORDER_4321
         | SDL_BITMAPORDER_1234

  let to_int = function
    | SDL_PACKEDORDER_NONE -> 0l
    | SDL_PACKEDORDER_XRGB -> 1l
    | SDL_PACKEDORDER_RGBX -> 2l
    | SDL_PACKEDORDER_ARGB -> 3l
    | SDL_PACKEDORDER_RGBA -> 4l
    | SDL_PACKEDORDER_XBGR -> 5l
    | SDL_PACKEDORDER_BGRX -> 6l
    | SDL_PACKEDORDER_ABGR -> 7l
    | SDL_PACKEDORDER_BGRA -> 8l
    | SDL_BITMAPORDER_NONE -> 0l
    | SDL_BITMAPORDER_4321 -> 1l
    | SDL_BITMAPORDER_1234 -> 2l
end

module Array_order = struct
  type t = SDL_ARRAYORDER_NONE
         | SDL_ARRAYORDER_RGB
         | SDL_ARRAYORDER_RGBA
         | SDL_ARRAYORDER_ARGB
         | SDL_ARRAYORDER_BGR
         | SDL_ARRAYORDER_BGRA
         | SDL_ARRAYORDER_ABG
  let to_int = function
    | SDL_ARRAYORDER_NONE -> 0l
    | SDL_ARRAYORDER_RGB -> 1l
    | SDL_ARRAYORDER_RGBA -> 2l
    | SDL_ARRAYORDER_ARGB -> 3l
    | SDL_ARRAYORDER_BGR -> 4l
    | SDL_ARRAYORDER_BGRA -> 5l
    | SDL_ARRAYORDER_ABG -> 6l
end

module Packed_layout = struct
  type t = SDL_PACKEDLAYOUT_NONE
         | SDL_PACKEDLAYOUT_332
         | SDL_PACKEDLAYOUT_4444
         | SDL_PACKEDLAYOUT_1555
         | SDL_PACKEDLAYOUT_5551
         | SDL_PACKEDLAYOUT_565
         | SDL_PACKEDLAYOUT_8888
         | SDL_PACKEDLAYOUT_2101010
         | SDL_PACKEDLAYOUT_1010102

  let to_int = function
    | SDL_PACKEDLAYOUT_NONE -> 0l
    | SDL_PACKEDLAYOUT_332 -> 1l
    | SDL_PACKEDLAYOUT_4444 -> 2l
    | SDL_PACKEDLAYOUT_1555 -> 3l
    | SDL_PACKEDLAYOUT_5551 -> 4l
    | SDL_PACKEDLAYOUT_565 -> 5l
    | SDL_PACKEDLAYOUT_8888 -> 6l
    | SDL_PACKEDLAYOUT_2101010 -> 7l
    | SDL_PACKEDLAYOUT_1010102 -> 8l

end

let define_fourcc a b c d =
  let (|-|) = Int32.logor
  and (<-<) = Int32.shift_left in
  let a = Int32.of_int (a lor 0xff)
  and b = Int32.of_int (b lor 0xff)
  and c = Int32.of_int (c lor 0xff)
  and d = Int32.of_int (d lor 0xff) in
  (a <-< 0) |-| (b <-< 8) |-| (c <-< 16) |-| (d <-< 24)

let define_pixelformat pixel_type order layout bits bytes =
  let mlb = Int32.shift_left 1l 28 in
  let pixel_type = Int32.shift_left (Pixel_type.to_int pixel_type) 24 in
  let order = Int32.shift_left (Packed_order.to_int order) 20 in
  let layout = Int32.shift_left (Packed_layout.to_int layout) 16 in
  let bits = Int32.shift_left bits 8 in
  let bytes = Int32.shift_left bytes 0 in
  let (|-|) = Int32.logor in
  mlb |-| pixel_type |-| order |-| layout |-| bits |-| bytes

type t =
    SDL_PIXELFORMAT_YVYU
  | SDL_PIXELFORMAT_UYVY
  | SDL_PIXELFORMAT_YUY2
  | SDL_PIXELFORMAT_IYUV
  | SDL_PIXELFORMAT_YV12
  | SDL_PIXELFORMAT_ARGB2101010
  | SDL_PIXELFORMAT_BGRA8888
  | SDL_PIXELFORMAT_ABGR8888
  | SDL_PIXELFORMAT_RGBA8888
  | SDL_PIXELFORMAT_ARGB8888
  | SDL_PIXELFORMAT_BGRX8888
  | SDL_PIXELFORMAT_BGR888
  | SDL_PIXELFORMAT_RGBX8888
  | SDL_PIXELFORMAT_RGB888
  | SDL_PIXELFORMAT_BGR24
  | SDL_PIXELFORMAT_RGB24
  | SDL_PIXELFORMAT_BGR565
  | SDL_PIXELFORMAT_RGB565
  | SDL_PIXELFORMAT_BGRA5551
  | SDL_PIXELFORMAT_RGBA5551
  | SDL_PIXELFORMAT_BGRA4444
  | SDL_PIXELFORMAT_RGBA4444
  | SDL_PIXELFORMAT_ARGB4444
  | SDL_PIXELFORMAT_ARGB1555
  | SDL_PIXELFORMAT_ABGR1555
  | SDL_PIXELFORMAT_BGR555
  | SDL_PIXELFORMAT_RGB555
  | SDL_PIXELFORMAT_RGB444
  | SDL_PIXELFORMAT_RGB332
  | SDL_PIXELFORMAT_INDEX8
  | SDL_PIXELFORMAT_INDEX4MSB
  | SDL_PIXELFORMAT_INDEX4LSB
  | SDL_PIXELFORMAT_INDEX1MSB
  | SDL_PIXELFORMAT_INDEX1LSB
  | SDL_PIXELFORMAT_UNKNOWN

let pixel_format_map = [
  (SDL_PIXELFORMAT_UNKNOWN ,0l);
  (SDL_PIXELFORMAT_INDEX1LSB ,define_pixelformat Pixel_type.SDL_PIXELTYPE_INDEX1 Packed_order.SDL_BITMAPORDER_4321 Packed_layout.SDL_PACKEDLAYOUT_NONE 1l 0l);
  (SDL_PIXELFORMAT_INDEX1MSB ,define_pixelformat Pixel_type.SDL_PIXELTYPE_INDEX1 Packed_order.SDL_BITMAPORDER_1234 Packed_layout.SDL_PACKEDLAYOUT_NONE 1l 0l);
  (SDL_PIXELFORMAT_INDEX4LSB ,define_pixelformat Pixel_type.SDL_PIXELTYPE_INDEX4 Packed_order.SDL_BITMAPORDER_4321 Packed_layout.SDL_PACKEDLAYOUT_NONE 4l 0l);
  (SDL_PIXELFORMAT_INDEX4MSB ,define_pixelformat Pixel_type.SDL_PIXELTYPE_INDEX4 Packed_order.SDL_BITMAPORDER_1234 Packed_layout.SDL_PACKEDLAYOUT_NONE 4l 0l);
  (SDL_PIXELFORMAT_INDEX8 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_INDEX8 Packed_order.SDL_BITMAPORDER_NONE Packed_layout.SDL_PACKEDLAYOUT_NONE 8l 1l);
  (SDL_PIXELFORMAT_RGB332 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED8 Packed_order.SDL_PACKEDORDER_XRGB Packed_layout.SDL_PACKEDLAYOUT_332 8l 1l);
  (SDL_PIXELFORMAT_RGB444 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_XRGB Packed_layout.SDL_PACKEDLAYOUT_4444 12l 2l);
  (SDL_PIXELFORMAT_RGB565 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_XRGB Packed_layout.SDL_PACKEDLAYOUT_1555 15l 2l);
  (SDL_PIXELFORMAT_BGR555 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_XBGR Packed_layout.SDL_PACKEDLAYOUT_1555 15l 2l);

  (SDL_PIXELFORMAT_ARGB4444 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_ARGB Packed_layout.SDL_PACKEDLAYOUT_4444 16l 2l);
  (SDL_PIXELFORMAT_RGBA4444 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_RGBA Packed_layout.SDL_PACKEDLAYOUT_4444 16l 2l);
  (SDL_PIXELFORMAT_BGRA4444 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_BGRA Packed_layout.SDL_PACKEDLAYOUT_4444 16l 2l);

  (SDL_PIXELFORMAT_ARGB1555 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_ARGB Packed_layout.SDL_PACKEDLAYOUT_1555 16l 2l);

  (SDL_PIXELFORMAT_RGBA5551 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_RGBA Packed_layout.SDL_PACKEDLAYOUT_5551 16l 2l);

  (SDL_PIXELFORMAT_ABGR1555 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_ABGR Packed_layout.SDL_PACKEDLAYOUT_1555 16l 2l);

  (SDL_PIXELFORMAT_BGRA5551 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_BGRA Packed_layout.SDL_PACKEDLAYOUT_5551 16l 2l);

  (SDL_PIXELFORMAT_RGB565 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_XRGB Packed_layout.SDL_PACKEDLAYOUT_565 16l 2l);

  (SDL_PIXELFORMAT_BGR565 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED16 Packed_order.SDL_PACKEDORDER_XBGR Packed_layout.SDL_PACKEDLAYOUT_565 16l 2l);

  (SDL_PIXELFORMAT_RGB24 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_ARRAYU8 Packed_order.SDL_PACKEDORDER_RGBX Packed_layout.SDL_PACKEDLAYOUT_NONE 24l 3l);

  (SDL_PIXELFORMAT_BGR24 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_ARRAYU8 Packed_order.SDL_PACKEDORDER_BGRX Packed_layout.SDL_PACKEDLAYOUT_NONE 24l 3l);

  (SDL_PIXELFORMAT_RGB888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_XRGB Packed_layout.SDL_PACKEDLAYOUT_8888 24l 4l);

  (SDL_PIXELFORMAT_RGBX8888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_RGBX Packed_layout.SDL_PACKEDLAYOUT_8888 24l 4l);

  (SDL_PIXELFORMAT_BGR888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_XBGR Packed_layout.SDL_PACKEDLAYOUT_8888 24l 4l);

  (SDL_PIXELFORMAT_BGRX8888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_BGRX Packed_layout.SDL_PACKEDLAYOUT_8888 24l 4l);

  (SDL_PIXELFORMAT_ARGB8888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_ARGB Packed_layout.SDL_PACKEDLAYOUT_8888 32l 4l);

  (SDL_PIXELFORMAT_RGBA8888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_RGBA Packed_layout.SDL_PACKEDLAYOUT_8888 32l 4l);

  (SDL_PIXELFORMAT_ABGR8888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_ABGR Packed_layout.SDL_PACKEDLAYOUT_8888 32l 4l);

  (SDL_PIXELFORMAT_BGRA8888 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_BGRA Packed_layout.SDL_PACKEDLAYOUT_8888 32l 4l);

  (SDL_PIXELFORMAT_ARGB2101010 ,define_pixelformat Pixel_type.SDL_PIXELTYPE_PACKED32 Packed_order.SDL_PACKEDORDER_ARGB Packed_layout.SDL_PACKEDLAYOUT_2101010 32l 4l);

  (SDL_PIXELFORMAT_YV12 ,define_fourcc (int_of_char 'Y') (int_of_char 'V') (int_of_char '1') (int_of_char '2'));
  (SDL_PIXELFORMAT_IYUV ,define_fourcc (int_of_char 'I') (int_of_char 'Y') (int_of_char 'U') (int_of_char 'V'));
  (SDL_PIXELFORMAT_YUY2 ,define_fourcc (int_of_char 'Y') (int_of_char 'U') (int_of_char 'Y') (int_of_char '2'));
  (SDL_PIXELFORMAT_UYVY ,define_fourcc (int_of_char 'U') (int_of_char 'Y') (int_of_char 'Y') (int_of_char 'Y'));
  (SDL_PIXELFORMAT_YVYU ,define_fourcc (int_of_char 'Y') (int_of_char 'V') (int_of_char 'Y') (int_of_char 'U'));
]

let to_int32 fmt =
  snd (List.find (fun (typ, _) -> typ = fmt) pixel_format_map)

let of_int32 target =
  fst (List.find (fun (_, v) -> v = target) pixel_format_map)
end
module Sdl_renderer_flags = struct
type t =
    SDL_RENDERER_TARGETTEXTURE
  | SDL_RENDERER_PRESENTVSYNC
  | SDL_RENDERER_ACCELERATED
  | SDL_RENDERER_SOFTWARE

let to_int = function
  | SDL_RENDERER_TARGETTEXTURE -> 0x8
  | SDL_RENDERER_PRESENTVSYNC -> 0x4
  | SDL_RENDERER_ACCELERATED -> 0x2
  | SDL_RENDERER_SOFTWARE -> 0x1

let of_int = function
  | 0x8 -> SDL_RENDERER_TARGETTEXTURE
  | 0x4 -> SDL_RENDERER_PRESENTVSYNC
  | 0x2 -> SDL_RENDERER_ACCELERATED
  | 0x1 -> SDL_RENDERER_SOFTWARE
  | _ -> failwith "No variant to match given value"

let list = [
  SDL_RENDERER_TARGETTEXTURE;
  SDL_RENDERER_PRESENTVSYNC;
  SDL_RENDERER_ACCELERATED;
  SDL_RENDERER_SOFTWARE;
]
end
module Sdl_renderer_flip = struct
type t =
    SDL_FLIP_VERTICAL
  | SDL_FLIP_HORIZONTAL
  | SDL_FLIP_NONE

let to_int = function
  | SDL_FLIP_VERTICAL -> 0x2
  | SDL_FLIP_HORIZONTAL -> 0x1
  | SDL_FLIP_NONE -> 0x0

let of_int = function
  | 0x2 -> SDL_FLIP_VERTICAL
  | 0x1 -> SDL_FLIP_HORIZONTAL
  | 0x0 -> SDL_FLIP_NONE
  | _ -> failwith "No variant to match given value"
end
module Sdl_rwops_type = struct
type t =
    SDL_RWOPS_UNKNOWN
  | SDL_RWOPS_WINFILE
  | SDL_RWOPS_STDFILE
  | SDL_RWOPS_INIFILE
  | SDL_RWOPS_MEMORY
  | SDL_RWOPS_MEMORY_RO

let to_int = function
  | SDL_RWOPS_UNKNOWN -> 0
  | SDL_RWOPS_WINFILE -> 1
  | SDL_RWOPS_STDFILE -> 2
  | SDL_RWOPS_INIFILE -> 3
  | SDL_RWOPS_MEMORY -> 4
  | SDL_RWOPS_MEMORY_RO -> 5

let of_int = function
  | 0 -> SDL_RWOPS_UNKNOWN
  | 1 -> SDL_RWOPS_WINFILE
  | 2 -> SDL_RWOPS_STDFILE
  | 3 -> SDL_RWOPS_INIFILE
  | 4 -> SDL_RWOPS_MEMORY
  | 5 -> SDL_RWOPS_MEMORY_RO
  | _ -> failwith "Unknow value for stream type"
end
module Sdl_state = struct
type t = SDL_DISABLE | SDL_QUERY | SDL_ENABLE
let to_int = function
  | SDL_DISABLE -> 0
  | SDL_QUERY -> -1
  | SDL_ENABLE -> 1

let of_int = function
  | 0 -> SDL_DISABLE
  | 1 -> SDL_ENABLE
  | -1 -> SDL_QUERY
  | _ -> failwith "No variant can convert with given value"
end
module Sdl_system_cursor = struct
type t =
  | SDL_SYSTEM_CURSOR_ARROW
  | SDL_SYSTEM_CURSOR_IBEAM
  | SDL_SYSTEM_CURSOR_WAIT
  | SDL_SYSTEM_CURSOR_CROSSHAIR
  | SDL_SYSTEM_CURSOR_WAITARROW
  | SDL_SYSTEM_CURSOR_SIZENWSE
  | SDL_SYSTEM_CURSOR_SIZENESW
  | SDL_SYSTEM_CURSOR_SIZEWE
  | SDL_SYSTEM_CURSOR_SIZENS
  | SDL_SYSTEM_CURSOR_SIZEALL
  | SDL_SYSTEM_CURSOR_NO
  | SDL_SYSTEM_CURSOR_HAND

let to_int = function
  | SDL_SYSTEM_CURSOR_ARROW -> 0x0
  | SDL_SYSTEM_CURSOR_IBEAM -> 0x1
  | SDL_SYSTEM_CURSOR_WAIT -> 0x2
  | SDL_SYSTEM_CURSOR_CROSSHAIR -> 0x3
  | SDL_SYSTEM_CURSOR_WAITARROW -> 0x4
  | SDL_SYSTEM_CURSOR_SIZENWSE -> 0x5
  | SDL_SYSTEM_CURSOR_SIZENESW -> 0x6
  | SDL_SYSTEM_CURSOR_SIZEWE -> 0x7
  | SDL_SYSTEM_CURSOR_SIZENS -> 0x8
  | SDL_SYSTEM_CURSOR_SIZEALL -> 0x9
  | SDL_SYSTEM_CURSOR_NO -> 0xa
  | SDL_SYSTEM_CURSOR_HAND -> 0xb

let of_int = function
  | 0x0 ->  SDL_SYSTEM_CURSOR_ARROW
  | 0x1 ->  SDL_SYSTEM_CURSOR_IBEAM
  | 0x2 ->  SDL_SYSTEM_CURSOR_WAIT
  | 0x3 ->  SDL_SYSTEM_CURSOR_CROSSHAIR
  | 0x4 ->  SDL_SYSTEM_CURSOR_WAITARROW
  | 0x5 ->  SDL_SYSTEM_CURSOR_SIZENWSE
  | 0x6 ->  SDL_SYSTEM_CURSOR_SIZENESW
  | 0x7 ->  SDL_SYSTEM_CURSOR_SIZEWE
  | 0x8 ->  SDL_SYSTEM_CURSOR_SIZENS
  | 0x9 ->  SDL_SYSTEM_CURSOR_SIZEALL
  | 0xa ->  SDL_SYSTEM_CURSOR_NO
  | 0xb ->  SDL_SYSTEM_CURSOR_HAND
  | _ -> failwith "No variant to match given value"
end
module Sdl_syswm_type = struct
type t =
    SDL_SYSWM_UIKIT
  | SDL_SYSWM_COCOA
  | SDL_SYSWM_DIRECTFB
  | SDL_SYSWM_X11
  | SDL_SYSWM_WINDOWS
  | SDL_SYSWM_UNKNOWN

let to_int = function
  | SDL_SYSWM_UIKIT -> 5
  | SDL_SYSWM_COCOA -> 4
  | SDL_SYSWM_DIRECTFB -> 3
  | SDL_SYSWM_X11 -> 2
  | SDL_SYSWM_WINDOWS -> 1
  | SDL_SYSWM_UNKNOWN -> 0

let of_int = function
  | 5 -> SDL_SYSWM_UIKIT
  | 4 -> SDL_SYSWM_COCOA
  | 3 -> SDL_SYSWM_DIRECTFB
  | 2 -> SDL_SYSWM_X11
  | 1 -> SDL_SYSWM_WINDOWS
  | 0 -> SDL_SYSWM_UNKNOWN
  | _ -> failwith "unknown syswm type"
end
module Sdl_texture_access = struct
type t =
    SDL_TEXTUREACCESS_TARGET
  | SDL_TEXTUREACCESS_STREAMING
  | SDL_TEXTUREACCESS_STATIC

let to_int = function
  | SDL_TEXTUREACCESS_STATIC -> 0
  | SDL_TEXTUREACCESS_STREAMING -> 1
  | SDL_TEXTUREACCESS_TARGET -> 2

let of_int = function
  | 0 -> SDL_TEXTUREACCESS_STATIC
  | 1 -> SDL_TEXTUREACCESS_STREAMING
  | 2 -> SDL_TEXTUREACCESS_TARGET
  | _ -> failwith "No variant to match given value"
end
module Sdl_texture_modulate = struct
type t =
    SDL_TEXTUREMODULATE_ALPHA
  | SDL_TEXTUREMODULATE_COLOR
  | SDL_TEXTUREMODULATE_NONE

let to_int = function
  | SDL_TEXTUREMODULATE_ALPHA -> 0x2
  | SDL_TEXTUREMODULATE_COLOR -> 0x1
  | SDL_TEXTUREMODULATE_NONE -> 0x0

let of_int = function
  | 0x2 -> SDL_TEXTUREMODULATE_ALPHA
  | 0x1 -> SDL_TEXTUREMODULATE_COLOR
  | 0x0 -> SDL_TEXTUREMODULATE_NONE
  | _ -> failwith "No variant to match given value"
end
module Sdl_window_event_id = struct
type t =
    SDL_WINDOWEVENT_CLOSE
  | SDL_WINDOWEVENT_FOCUS_LOST
  | SDL_WINDOWEVENT_FOCUS_GAINED
  | SDL_WINDOWEVENT_LEAVE
  | SDL_WINDOWEVENT_ENTER
  | SDL_WINDOWEVENT_RESTORED
  | SDL_WINDOWEVENT_MAXIMIZED
  | SDL_WINDOWEVENT_MINIMIZED
  | SDL_WINDOWEVENT_SIZE_CHANGED
  | SDL_WINDOWEVENT_RESIZED
  | SDL_WINDOWEVENT_MOVED
  | SDL_WINDOWEVENT_EXPOSED
  | SDL_WINDOWEVENT_HIDDEN
  | SDL_WINDOWEVENT_SHOWN

let to_int = function
  | SDL_WINDOWEVENT_CLOSE -> 14
  | SDL_WINDOWEVENT_FOCUS_LOST -> 13
  | SDL_WINDOWEVENT_FOCUS_GAINED -> 12
  | SDL_WINDOWEVENT_LEAVE -> 11
  | SDL_WINDOWEVENT_ENTER -> 10
  | SDL_WINDOWEVENT_RESTORED -> 9
  | SDL_WINDOWEVENT_MAXIMIZED -> 8
  | SDL_WINDOWEVENT_MINIMIZED -> 7
  | SDL_WINDOWEVENT_SIZE_CHANGED -> 6
  | SDL_WINDOWEVENT_RESIZED -> 5
  | SDL_WINDOWEVENT_MOVED -> 4
  | SDL_WINDOWEVENT_EXPOSED -> 3
  | SDL_WINDOWEVENT_HIDDEN -> 2
  | SDL_WINDOWEVENT_SHOWN -> 1

let of_int = function
  | 14 -> SDL_WINDOWEVENT_CLOSE
  | 13 -> SDL_WINDOWEVENT_FOCUS_LOST
  | 12 -> SDL_WINDOWEVENT_FOCUS_GAINED
  | 11 -> SDL_WINDOWEVENT_LEAVE
  | 10 -> SDL_WINDOWEVENT_ENTER
  | 9 -> SDL_WINDOWEVENT_RESTORED
  | 8 -> SDL_WINDOWEVENT_MAXIMIZED
  | 7 -> SDL_WINDOWEVENT_MINIMIZED
  | 6 -> SDL_WINDOWEVENT_SIZE_CHANGED
  | 5 -> SDL_WINDOWEVENT_RESIZED
  | 4 -> SDL_WINDOWEVENT_MOVED
  | 3 -> SDL_WINDOWEVENT_EXPOSED
  | 2 -> SDL_WINDOWEVENT_HIDDEN
  | 1 -> SDL_WINDOWEVENT_SHOWN
  | _ -> failwith "No variant to match given value"
end
module Sdl_window_flags = struct
type t = [ `ALLOW_HIGHDPI
         | `FOREIGN
         | `MOUSE_FOCUS
         | `INPUT_FOCUS
         | `INPUT_GRABBED
         | `MAXIMIZED
         | `MINIMIZED
         | `RESIZABLE
         | `BORDERLESS
         | `SHOWN
         | `HIDDEN
         | `OPENGL
         | `FULLSCREEN_DESKTOP
         | `FULLSCREEN
         ]

let flags = [ `ALLOW_HIGHDPI
            ; `FOREIGN
            ; `MOUSE_FOCUS
            ; `INPUT_FOCUS
            ; `INPUT_GRABBED
            ; `MAXIMIZED
            ; `MINIMIZED
            ; `RESIZABLE
            ; `BORDERLESS
            ; `SHOWN
            ; `HIDDEN
            ; `OPENGL
            ; `FULLSCREEN_DESKTOP
            ; `FULLSCREEN
            ]

let to_int = function
  | `ALLOW_HIGHDPI -> 0x2000
  | `FULLSCREEN -> 0x1
  | `FULLSCREEN_DESKTOP -> 0x1001
  | `FOREIGN -> 0x800
  | `MOUSE_FOCUS -> 0x400
  | `INPUT_FOCUS -> 0x200
  | `INPUT_GRABBED -> 0x100
  | `MAXIMIZED -> 0x80
  | `MINIMIZED -> 0x40
  | `RESIZABLE -> 0x20
  | `BORDERLESS -> 0x10
  | `SHOWN -> 0x4
  | `HIDDEN -> 0x8
  | `OPENGL -> 0x2
  | _ -> invalid_arg "Sdlcaml_flags.Sdl_window_flags"

let of_int = function
  | 0x2000 -> `ALLOW_HIGHDPI
  | 0x1 -> `FULLSCREEN
  | 0x1001 -> `FULLSCREEN_DESKTOP
  | 0x800 -> `FOREIGN
  | 0x400 -> `MOUSE_FOCUS
  | 0x200 -> `INPUT_FOCUS
  | 0x100 -> `INPUT_GRABBED
  | 0x80 -> `MAXIMIZED
  | 0x40 -> `MINIMIZED
  | 0x20 -> `RESIZABLE
  | 0x10 -> `BORDERLESS
  | 0x4 -> `SHOWN
  | 0x8 -> `HIDDEN
  | 0x2 -> `OPENGL
  | _ -> invalid_arg "Sdlcaml_flags.Sdl_window_flags"
end
