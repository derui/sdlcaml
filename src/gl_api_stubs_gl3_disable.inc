#include <caml/fail.h>
#include <caml/mlvalues.h>
#include <caml/alloc.h>

CAMLprim value gl_api_glAttachShader(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glAttachShader can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindAttribLocation(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindAttribLocation can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindBuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindBuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindFragDataLocation(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindFragDataLocation can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindFragDataLocationIndexed(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindFragDataLocationIndexed can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindFramebuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindFramebuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindRenderbuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindRenderbuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindSampler(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindSampler can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBindVertexArray(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBindVertexArray can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBlendEquationSeparate(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBlendEquationSeparate can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBlendFuncSeparate(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBlendFuncSeparate can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBlitFramebuffer_bytecode(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBlitFramebuffer_bytecode can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBlitFramebuffer_native(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBlitFramebuffer_native can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBufferData(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBufferData can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glBufferSubData(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glBufferSubData can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glCheckFramebufferStatus(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glCheckFramebufferStatus can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glClampColor(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glClampColor can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glClearBuffer_color(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glClearBuffer_color can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glClearBuffer_depth(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glClearBuffer_depth can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glClearBuffer_stencil(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glClearBuffer_stencil can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glCompileShader(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glCompileShader can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glCopyBufferSubData(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glCopyBufferSubData can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glCreateProgram(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glCreateProgram can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glCreateShader(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glCreateShader can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDeleteBuffers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDeleteBuffers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDeleteFramebuffers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDeleteFramebuffers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDeleteProgram(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDeleteProgram can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDeleteRenderbuffers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDeleteRenderbuffers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDeleteSamplers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDeleteSamplers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDeleteShader(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDeleteShader can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDeleteVertexArrays(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDeleteVertexArrays can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDetachShader(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDetachShader can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDrawBuffers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDrawBuffers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glEnableVertexAttribArray(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glEnableVertexAttribArray can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glDisableVertexAttribArray(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glDisableVertexAttribArray can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glFlushMappedBufferRange(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glFlushMappedBufferRange can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glFramebufferRenderbuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glFramebufferRenderbuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glFramebufferTextureLayer_attachment(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glFramebufferTextureLayer_attachment can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glFramebufferTextureLayer_depth(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glFramebufferTextureLayer_depth can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glFramebufferTextureLayer_stencil(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glFramebufferTextureLayer_stencil can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glFramebufferTextureLayer_depth_stencil(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glFramebufferTextureLayer_depth_stencil can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenBuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenBuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenBuffers(value size) {
  CAMLparam1(size);
  caml_failwith("gl_api_glGenBuffers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenFramebuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenFramebuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenFramebuffers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenFramebuffers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenRenderbuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenRenderbuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenRenderbuffers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenRenderbuffers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenSampler(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenSampler can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenSamplers(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenSamplers can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenVertexArray(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenVertexArray can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenVertexArrays(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenVertexArrays can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGenerateMipmap(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGenerateMipmap can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveAttrib_length(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveAttrib_length can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveAttrib_size(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveAttrib_size can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveAttrib_type(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveAttrib_type can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveAttrib_name(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveAttrib_name can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniform_length(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniform_length can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniform_type(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniform_type can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniform_name(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniform_name can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniformBlock(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniformBlock can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniformBlock_indices(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniformBlock_indices can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniformBlockName(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniformBlockName can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniformName(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniformName can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetActiveUniforms_type(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetActiveUniforms_type can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetAttachedShaders(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetAttachedShaders can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetAttribLocation(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetAttribLocation can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetBufferParameter_access(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetBufferParameter_access can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetBufferParameter_mapped(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetBufferParameter_mapped can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetBufferParameter_size(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetBufferParameter_size can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetBufferParameter_usage(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetBufferParameter_usage can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetBufferSubData(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetBufferSubData can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFragDataIndex(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetFragDataIndex can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFragDataLocation(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetFragDataLocation can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_attachment(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_attachment can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_depth(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_depth can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_stencil(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_stencil can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_depth_stencil(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_depth_stencil can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetMultisample(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetMultisample can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetProgramInfoLog(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetProgramInfoLog can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetRenderbufferParameter(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetRenderbufferParameter can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetSamplerParameter_min_filter(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetSamplerParameter_min_filter can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetSamplerParameter_mag_filter(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetSamplerParameter_mag_filter can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetSamplerParameter_lod(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetSamplerParameter_lod can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetSamplerParameter_wrap(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetSamplerParameter_wrap can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetSamplerParameter_compare_mode(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetSamplerParameter_compare_mode can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetSamplerParameter_compare_func(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetSamplerParameter_compare_func can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetSamplerParameter_color(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetSamplerParameter_color can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetShader_type(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetShader_type can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetShader_bool(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetShader_bool can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetShader_int(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetShader_int can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetShaderInfoLog(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetShaderInfoLog can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetShaderSource(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetShaderSource can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformf1(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformf1 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformf2(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformf2 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformf3(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformf3 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformf4(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformf4 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformi1(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformi1 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformi2(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformi2 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformi3(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformi3 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformi4(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformi4 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformui1(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformui1 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformui2(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformui2 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformui3(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformui3 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformui4(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformui4 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformBlockIndex(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformBlockIndex can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformIndices(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformIndices can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetUniformLocation(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetUniformLocation can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetVertexAttrib_bool(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetVertexAttrib_bool can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetVertexAttrib_int(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetVertexAttrib_int can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetVertexAttrib_vertex(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glGetVertexAttrib_vertex can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glIsBuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glIsBuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glIsFramebuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glIsFramebuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glIsProgram(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glIsProgram can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glIsRenderbuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glIsRenderbuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glIsSampler(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glIsSampler can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glIsShader(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glIsShader can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glIsVertexArray(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glIsVertexArray can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glLinkProgram(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glLinkProgram can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glMapBuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glMapBuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUnmapBuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUnmapBuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glMapBufferRange(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glMapBufferRange can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glMultiDrawElements(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glMultiDrawElements can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glPointParameter(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glPointParameter can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glPointParameter_coord(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glPointParameter_coord can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glPrimitiveRestartIndex(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glPrimitiveRestartIndex can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glProvokingVertex(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glProvokingVertex can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glRenderbufferStorageMultisample(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glRenderbufferStorageMultisample can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glSampleMask(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glSampleMask can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glSamplerParameter(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glSamplerParameter can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glShaderSource(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glShaderSource can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glStencilFuncSeparate(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glStencilFuncSeparate can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glStencilMaskSeparate(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glStencilMaskSeparate can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glStencilOpSeparate(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glStencilOpSeparate can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glTexBuffer(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glTexBuffer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glTransformFeedbackVaryings(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glTransformFeedbackVaryings can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform1f(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform1f can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform2f(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform2f can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform3f(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform3f can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform4f(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform4f can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform1ui(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform1ui can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform2ui(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform2ui can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform3ui(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform3ui can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniform4ui(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniform4ui can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformMatrix(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformMatrix can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformMatrix2x3(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformMatrix2x3 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformMatrix3x2(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformMatrix3x2 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformMatrix2x4(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformMatrix2x4 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformMatrix4x2(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformMatrix4x2 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformMatrix3x4(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformMatrix3x4 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformMatrix4x3(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformMatrix4x3 can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUniformBlockBinding(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUniformBlockBinding can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glUseProgram(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glUseProgram can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glValidateProgram(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glValidateProgram can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribf(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glVertexAttribf can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribi(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glVertexAttribi can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribui(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glVertexAttribui can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribs(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glVertexAttribs can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribus(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glVertexAttribus can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribd(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glVertexAttribd can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribDivisor(value unit) {
  CAMLparam1(unit);
  caml_failwith("gl_api_glVertexAttribDivisor can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glVertexAttribPointer(value index,
                                            value vert_type, value normalize,
                                            value stride) {
  CAMLparam4(index, vert_type, normalize, stride);
  caml_failwith("gl_api_glVertexAttribPointer can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_type_color(
    value target, value num) {

  CAMLparam2(target, num);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_type_color can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_type_other(
    value target, value attachment) {
  CAMLparam2(target, num);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_type_other can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_int_color(
    value target, value num, value pname) {
  CAMLparam3(target, num, pname);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_int_color can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_int_other(
    value target, value num, value pname) {
  CAMLparam3(target, num, pname);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_int_other can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_component_color(
    value target, value num) {
  CAMLparam2(target, num);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_component_color can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_component_other(
    value target, value attachment) {
  CAMLparam2(target, attachment);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_component_other can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_encoding_color(
    value target, value num) {
  CAMLparam2(target, num);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_encoding_color can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}

CAMLprim value gl_api_glGetFramebufferAttachmentParameter_encoding_other(
    value target, value attachment) {
  CAMLparam2(target, attachment);
  caml_failwith("gl_api_glGetFramebufferAttachmentParameter_encoding_other can not use if OpenGL3.* option did not set.");
  CAMLreturn(Val_unit);
}
