########################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################
# The standard OMakefile.
# You will usually need to modify this file for your project.

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#
open build/C

#
# This project requires ocamlfind (default - false).
#
USE_OCAMLFIND = true
#
OCAMLPACKS[] =
	str
#    stdlib
#
if $(not $(OCAMLFIND_EXISTS))
   eprintln(This project requires ocamlfind, but is was not found.)
   eprintln(You need to install ocamlfind and run "omake --configure".)
   exit 1

#
# Include path
#
# OCAMLINCLUDES += ../lib

#
# Compile native or byte code?
#
# The default values are defined as follows:
#
NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = $(not $(OCAMLOPT_EXISTS))

#
# Various options
#
OCAMLFLAGS    += -annot
# OCAMLCFLAGS   +=
OCAMLOPTFLAGS += -linkpkg
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=

################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
# OCamlGeneratedFiles(parser.ml lexer.ml)

################################################
# Build bindings for OCaml to C.
#

INCLUDES += /usr/include/caml

sdl_initflags.h: initflag$(EXE) sdl_initflags.h.in
	section
		initflags = $(concat \\n, $(shella $<))
		sed -e "s/#FLAGS/$(initflags)/" $(nth 1, $+) > $@
		cp $@ ../src/$@

initflag$(EXE): outputflag.c initflag.ml
	$(OCAMLC) -ccopt "$(PREFIXED_INCLUDES)" -o $(addsuffix $(EXT_OBJ), $(removesuffix $<)) -c $<
	$(OCAMLMKLIB) -o $(removesuffix $@) $(addsuffix $(EXT_OBJ), $(removesuffix $<))
	$(OCAMLOPT) -o $@ $(nth 1, $+) -cclib "$(absname lib$(removesuffix $@)$(EXT_LIB))"

sdl_mixer_flags.h: mixerflag$(EXE) sdl_mixer_flags.h.in
	section
		initflags = $(concat \\n, $(shella $<))
		sed -e "s/#FLAGS/$(initflags)/" $(nth 1, $+) > $@
		cp $@ ../src/$@

mixerflag$(EXE): outputflag.c mixerflag.ml
	$(OCAMLC) -ccopt "$(PREFIXED_INCLUDES)" -o $(addsuffix $(EXT_OBJ), $(removesuffix $<)) -c $<
	$(OCAMLMKLIB) -o $(removesuffix $@) $(addsuffix $(EXT_OBJ), $(removesuffix $<))
	$(OCAMLOPT) -o $@ $(nth 1, $+) -cclib "$(absname lib$(removesuffix $@)$(EXT_LIB))"

sdl_gl_flags.h: glflag$(EXE) sdl_gl_flags.h.in
	section
		initflags = $(concat \\n, $(shella $<))
		sed -e "s/#FLAGS/$(initflags)/" $(nth 1, $+) > $@
		cp $@ ../src/$@

glflag$(EXE): outputflag.c glflag.ml
	$(OCAMLC) -ccopt "$(PREFIXED_INCLUDES)" -o $(addsuffix $(EXT_OBJ), $(removesuffix $<)) -c $<
	$(OCAMLMKLIB) -o $(removesuffix $@) $(addsuffix $(EXT_OBJ), $(removesuffix $<))
	$(OCAMLOPT) -o $@ $(nth 1, $+) -cclib "$(absname lib$(removesuffix $@)$(EXT_LIB))"

#
# OCAML_LIBS += ../lib/mylib
# OCAML_CLIBS +=
# OCAML_OTHER_LIBS += nums Glut GL bigarray vertArray VBO
# OCAML_LIB_FLAGS +=
# OCAML_PACKAGE_NAME =
#
GENERATE = sdl_initflags.h
GENERATE += sdl_mixer_flags.h
GENERATE += sdl_gl_flags.h
GENERATE += $(OCamlProgram gl_enum_generator, gl_enum_generator)
GENERATE += $(OCamlProgram gl_api_generator, gl_api_generator)

.DEFAULT: $(GENERATE)

.PHONY: clean

clean:
	rm -f *.o
	rm -f *.so
	rm -f *.a
	rm -f *.cmi
	rm -f *.cmx
	rm -f *.h
	rm -f glflag$(EXE)
	rm -f initflag$(EXE)
	rm -f mixerflag$(EXE)
	rm -f gl_enum_generator$(EXE)
